(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{252:function(t,a,e){"use strict";e.r(a);var s=e(5),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("git 命令")])]),t._v(" "),e("h2",{attrs:{id:"从远程库克隆"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从远程库克隆"}},[t._v("#")]),t._v(" 从远程库克隆")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git clone git@github.com:xxxxx.git\n")])])]),e("p",[t._v("如果远程仓库没有添加 SSH,那么可以使用 https:// 的方式克隆,Git 支持多种协议,但 SSH 的速度最快.")]),t._v(" "),e("h2",{attrs:{id:"git-文件过大-只clone最后一次的commit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-文件过大-只clone最后一次的commit"}},[t._v("#")]),t._v(" .git 文件过大,只clone最后一次的commit")]),t._v(" "),e("p",[t._v("在 clone 的命令后面加上 "),e("strong",[t._v("--depth=1")]),e("br"),t._v(" "),e("code",[t._v("git clone ssh:xxxx --depth=1")])]),t._v(" "),e("h2",{attrs:{id:"全局写入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局写入"}},[t._v("#")]),t._v(" 全局写入")]),t._v(" "),e("p",[t._v("通常在第一次安装完 Git 后需要在全局中指定用户名和邮箱")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git config --global user.name "yourName"\ngit config --global user.email "yourEmail@xx.com"\n')])])]),e("h2",{attrs:{id:"远程仓库-创建-ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库-创建-ssh"}},[t._v("#")]),t._v(" 远程仓库,创建 SSH")]),t._v(" "),e("p",[t._v("创建 SSH Key.在用户主目录下,看看有没有.ssh 目录,如果有,再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件,如果已经有了,可直接跳到下一步.如果没有,打开 Shell（Windows 下打开 Git Bash）,创建 SSH Key:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('ssh-keygen -t rsa -C "youremail@xx.com"\n')])])]),e("p",[t._v("你需要把邮件地址换成你自己的邮件地址,然后一路回车,使用默认值即可,由于这个 Key 也不是用于军事目的,所以也无需设置密码.\n如果一切顺利的话,可以在用户主目录里找到.ssh目录,里面有id_rsa和id_rsa.pub两个文件,这两个就是SSH Key的秘钥对,id_rsa是私钥,不能泄露出去,id_rsa.pub是公钥,可以放心地告诉任何人.")]),t._v(" "),e("h2",{attrs:{id:"git-仓库初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-仓库初始化"}},[t._v("#")]),t._v(" Git 仓库初始化")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git init  # 如果不想一路回车可以使用默认 git init -y\n")])])]),e("h2",{attrs:{id:"添加文件到-git-仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#添加文件到-git-仓库"}},[t._v("#")]),t._v(" 添加文件到 Git 仓库")]),t._v(" "),e("p",[t._v("git add . (提交所有文件)\ngit commit -m ‘message’ (message 是当前提交的说明<注释>)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git add .\ngit commit -m 'message'\n")])])]),e("h2",{attrs:{id:"查看仓库状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看仓库状态"}},[t._v("#")]),t._v(" 查看仓库状态")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git status\n")])])]),e("h2",{attrs:{id:"查看修改内容"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看修改内容"}},[t._v("#")]),t._v(" 查看修改内容")]),t._v(" "),e("p",[t._v("git diff 就时查看 difference")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git diff\n")])])]),e("h2",{attrs:{id:"查看日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看日志"}},[t._v("#")]),t._v(" 查看日志")]),t._v(" "),e("p",[t._v("git log 命令显示从最近到最远的提交日志,如果嫌输出信息太多,看得眼花缭乱的,可以试试加上 –pretty=oneline 参数:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git log --pretty=oneline\n")])])]),e("h2",{attrs:{id:"版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),e("p",[t._v("Git 必须知道当前版本是哪个版本,在 Git 中,用 HEAD 表示当前版本,上一个版本就是 HEAD^,上上一个版本就是 HEAD^^,当然往上 100 个版本写 100 个^比较容易数不过来,所以写成 HEAD~100.把版本回退到上一个版本,可以使用 git reset :")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reset --hard HEAD^ // 回退到上个版本\n\n// 回到指定版本,0904ab是指版本号\n// 版本回退后再找回回退前指定 commit id 的版本\ngit reset --hard 0904ab \n// 远程仓库的回退后需要强制提交回退远程版本\ngit push origin master --force\n")])])]),e("h2",{attrs:{id:"记录-commit-id"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#记录-commit-id"}},[t._v("#")]),t._v(" 记录 commit id")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git reflog\n")])])]),e("h2",{attrs:{id:"将本地仓库与远程仓库关联-如-github-gitee"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将本地仓库与远程仓库关联-如-github-gitee"}},[t._v("#")]),t._v(" 将本地仓库与远程仓库关联(如 github/gitee)")]),t._v(" "),e("p",[t._v("::: warning 注意: origin 后的内容为远程仓库地址\ngit remote add origin git@github.com:xxxxx.git\n:::")]),t._v(" "),e("h2",{attrs:{id:"推送到远程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推送到远程库"}},[t._v("#")]),t._v(" 推送到远程库")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push -u origin master\n")])])]),e("p",[t._v("如果远程仓库是空的,第一推送的时候 -u 参数会把本地的 master 分支内容推送到远程 master 还会把二者关联起来,以后就可以使用 git push origin master 简化命令.")]),t._v(" "),e("h2",{attrs:{id:"创建-合并-删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建-合并-删除分支"}},[t._v("#")]),t._v(" 创建/合并/删除分支")]),t._v(" "),e("p",[t._v("创建 dev 分支,然后切换到 dev 分支\ngit checkout 命令加上 -b 参数表示创建并切换,相当于 git branch dev , git checkout dev (branch 可以查看仓库的分支)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout -b dev\n")])])]),e("p",[t._v("合并分支,先切换到指定分支,如 master ,然后在 master 分支中 合并 dev 分支,如下两条指令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git checkout master\ngit merge dev\n")])])]),e("p",[t._v("删除分支,如果需要删除dev分支可以使用如下指令")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git branch -d dev\n")])])]),e("h2",{attrs:{id:"多人协作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多人协作"}},[t._v("#")]),t._v(" 多人协作")]),t._v(" "),e("p",[t._v("要查看远程库的信息,用 git remote\n或者，用 git remote -v 显示更详细的信息")]),t._v(" "),e("p",[t._v("现在有一个新的小伙伴,一起开发那么要怎么做呢?")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 克隆项目\ngit clone git@github.com:xxx/xxx.git\n// 创建 dev 分支\ngit checkout -b dev origin/dev\n// 添加所有修改文件\ngit add .\n// 提交到仓库,注释 message\ngit commit -m "message"\n// 拉取远程 dev 分支\ngit pull origin dev\n// 如果 pull 失败,原因是没有指定本地 dev 分支与远程 origin/dev 分支的链接,根据提示,设置 dev 和 origin/dev 的链接\ngit branch --set-upstream-to=origin/dev dev\n// 上传到远程 dev 分支\ngit push origin dev\n')])])]),e("h2",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[t._v("#")]),t._v(" 标签")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("可以对版本打上标签,注明版本号,\n// 创建标签,版本号 1.0\ngit tag v1.0\n// 显示标签\ngit show\n// 删除标签\ngit tag -d v0.1\n")])])]),e("h2",{attrs:{id:"资料参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#资料参考"}},[t._v("#")]),t._v(" 资料参考")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.liaoxuefeng.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("廖雪峰老师的Git教程"),e("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);