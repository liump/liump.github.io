(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{289:function(a,e,t){"use strict";t.r(e);var n=t(5),s=Object(n.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("blockquote",[t("p",[a._v("ES6/ES7/ES8/ES9 资料")])]),a._v(" "),t("p",[a._v("内容转载于 "),t("a",{attrs:{href:"https://juejin.im/post/5c02b106f265da61764aa0c1#heading-62",target:"_blank",rel:"noopener noreferrer"}},[a._v("ES6/ES7/ES8/ES9资料整理"),t("OutboundLink")],1)]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("ECMAScript版本")]),a._v(" "),t("th",{staticStyle:{"text-align":"center"}},[a._v("发布时间")]),a._v(" "),t("th",[a._v("新增特性")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("ECMAScript 2009(ES5)")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[a._v("2009年11月")]),a._v(" "),t("td",[a._v("扩展了Object、Array、Function的功能等")])]),a._v(" "),t("tr",[t("td",[a._v("ECMAScript 2015(ES6)")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[a._v("2015年6月")]),a._v(" "),t("td",[a._v("类，模块化，箭头函数，函数参数默认值等")])]),a._v(" "),t("tr",[t("td",[a._v("ECMAScript 2016(ES7)")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[a._v("2016年3月")]),a._v(" "),t("td",[a._v("includes，指数操作符")])]),a._v(" "),t("tr",[t("td",[a._v("ECMAScript 2017(ES8)")]),a._v(" "),t("td",{staticStyle:{"text-align":"center"}},[a._v("2017年6月")]),a._v(" "),t("td",[a._v("async/await，Object.values()，Object.entries()，St123")])])])]),a._v(" "),t("h2",{attrs:{id:"_1-es6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-es6"}},[a._v("#")]),a._v(" 1. ES6")]),a._v(" "),t("h2",{attrs:{id:"_1-1-let-和-const命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-let-和-const命令"}},[a._v("#")]),a._v(" 1.1 let 和 const命令")]),a._v(" "),t("p",[a._v("在ES6中，我们通常实用 let 表示变量，const 表示常量，并且 let 和 const 都是块级作用域，且在当前作用域有效不能重复声明。")]),a._v(" "),t("h3",{attrs:{id:"_1-1-1-let-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-1-let-命令"}},[a._v("#")]),a._v(" 1.1.1 let 命令")]),a._v(" "),t("p",[a._v("let 命令的用法和 var 相似，但是 let 只在所在代码块内有效。\n基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("{\n    let a = 1;\n    let b = 2;\n}\n")])])]),t("p",[a._v("并且 let 有以下特点：")]),a._v(" "),t("p",[a._v("不存在变量提升：")]),a._v(" "),t("p",[a._v("在ES6之前，我们 var 声明一个变量一个函数，都会伴随着变量提升的问题，导致实际开发过程经常出现一些逻辑上的疑惑，按照一般思维习惯，变量都是需要先声明后使用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// var \nconsole.log(v1); // undefined\nvar v1 = 2;\n// 由于变量提升 代码实际如下\nvar v1;\nconsole.log(v1)\nv1 = 2;\n\n// let \nconsole.log(v2); // ReferenceError\nlet v2 = 2;\n")])])]),t("p",[a._v("不允许重复声明：")]),a._v(" "),t("p",[a._v("let 和 const 在相同作用域下，都不能重复声明同一变量，并且不能在函数内重新声明参数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 1. 不能重复声明同一变量\n// 报错\nfunction f1 (){\n    let a = 1;\n    var a = 2;\n}\n// 报错\nfunction f2 (){\n    let a = 1;\n    let a = 2;\n}\n\n// 2. 不能在函数内重新声明参数\n// 报错\nfunction f3 (a1){\n    let a1; \n}\n// 不报错\nfunction f4 (a2){\n    {\n        let a2\n    }\n}\n")])])]),t("h3",{attrs:{id:"_1-1-2-const-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-2-const-命令"}},[a._v("#")]),a._v(" 1.1.2 const 命令")]),a._v(" "),t("p",[a._v("const 声明一个只读的常量。\n基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const PI = 3.1415926;\nconsole.log(PI);  // 3.1415926\n")])])]),t("p",[a._v("::: tip 注意点：\nconst 声明后，无法修改值；\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const PI = 3.1415926;\nPI = 3; \n// TypeError: Assignment to constant variable.\n")])])]),t("p",[a._v("const 声明时，必须赋值；")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a ; \n// SyntaxError: Missing initializer in const declaration.\n")])])]),t("p",[a._v("const 声明的常量，let 不能重复声明；")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const PI = 3.1415926;\nlet PI = 0;  \n// Uncaught SyntaxError: Identifier 'PI' has already been declared\n")])])]),t("h2",{attrs:{id:"_1-2-变量的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-变量的解构赋值"}},[a._v("#")]),a._v(" 1.2 变量的解构赋值")]),a._v(" "),t("p",[a._v("解构赋值概念：在ES6中，直接从数组和对象中取值，按照对应位置，赋值给变量的操作。")]),a._v(" "),t("h3",{attrs:{id:"_1-2-1-数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-数组"}},[a._v("#")]),a._v(" 1.2.1 数组")]),a._v(" "),t("p",[a._v("基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ES6 之前\nlet a = 1;\nlet b = 2;\n\n// ES6 之后\nlet [a, b] = [1, 2];\n")])])]),t("p",[a._v("本质上，只要等号两边模式一致，左边变量即可获取右边对应位置的值，更多用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let [a, [[b], c]] = [1, [[2], 3]];\nconsole.log(a, b, c); // 1, 2, 3\n\nlet [ , , c] = [1, 2, 3];\nconsole.log(c);       // 3\n\nlet [a, , c] = [1, 2, 3];\nconsole.log(a,c);     // 1, 3\n\nlet [a, ...b] = [1, 2, 3];\nconsole.log(a,b);     // 1, [2,3]\n\nlet [a, b, ..c.] = [1];\nconsole.log(a, b, c); // 1, undefined, []\n")])])]),t("p",[a._v("::: tip 注意点：\n如果解构不成功，变量的值就等于undefined。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let [a] = [];     // a => undefined\nlet [a, b] = [1]; // a => 1 , b => undefined\n")])])]),t("p",[a._v("当左边模式多于右边，也可以解构成功。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let [a, b] = [1, 2, 3];\nconsole.log(a, b); // 1, 2\n")])])]),t("p",[a._v("两边模式不同，报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let [a] = 1;\nlet [a] = false;\nlet [a] = NaN;\nlet [a] = undefined;\nlet [a] = null;\nlet [a] = {};\n")])])]),t("p",[a._v("指定解构的默认值：\n基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let [a = 1] = [];      // a => 1\nlet [a, b = 2] = [a];  // a => 1 , b => 2\n")])])]),t("p",[a._v("特殊情况：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let [a = 1] = [undefined]; // a => 1\nlet [a = 1] = [null];      // a => null\n")])])]),t("p",[a._v("右边模式对应的值，必须严格等于undefined，默认值才能生效，而null不严格等于undefined。")]),a._v(" "),t("h3",{attrs:{id:"_1-2-2-对象的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-对象的解构赋值"}},[a._v("#")]),a._v(" 1.2.2 对象的解构赋值")]),a._v(" "),t("p",[a._v("与数组解构不同的是，对象解构不需要严格按照顺序取值，而只要按照变量名去取对应属性名的值，若取不到对应属性名的值，则为undefined 。")]),a._v(" "),t("p",[a._v("基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let {a, b} = {a:1, b:2};  // a => 1 , b => 2\nlet {a, b} = {a:2, b:1};  // a => 2 , b => 1\nlet {a} = {a:3, b:2, c:1};// a => 3\nlet {a} = {b:2, c:1};     // a => undefined\n")])])]),t("p",[a._v("::: tip注意点：\n若变量名和属性名不一致，则需要修改名称。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let {a:b} = {a:1, c:2}; \n// error: a is not defined\n// b => 1\n")])])]),t("p",[a._v("对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n上面代码中，a 是匹配的模式，b才是变量。真正被赋值的是变量b，而不是模式a。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("对象解构也支持嵌套解构。\nlet obj = {\n    a:[ 1, { b: 2}]\n};\nlet {a, a: [c, {b}]} = obj;\n// a=>[1, {b: 2}], b => 2, c => 1\n")])])]),t("p",[a._v("指定解构的默认值：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let {a=1} = {};        // a => 1\nlet {a, b=1} = {a:2};  // a => 2, b => 1\n\nlet {a:b=3} = {};      // b => 3\nlet {a:b=3} = {a:4};   // b = >4\n// a是模式，b是变量 牢记\n\nlet {a=1} = {a:undefined};  // a => 1\nlet {a=1} = {a:null};   // a => null\n// 因为null与undefined不严格相等，所以赋值有效\n// 导致默认值1不会生效。\n")])])]),t("h3",{attrs:{id:"_1-2-3-字符串的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-字符串的解构赋值"}},[a._v("#")]),a._v(" 1.2.3 字符串的解构赋值")]),a._v(" "),t("p",[a._v("字符串的解构赋值中，字符串被转换成了一个类似数组的对象。 基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('const [a, b, c, d, e] = \'hello\';\na // "h"\nb // "e"\nc // "l"\nd // "l"\ne // "o"\n\nlet {length:len} = \'hello\';// len => 5\n')])])]),t("h3",{attrs:{id:"_1-2-4-数值和布尔值的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-数值和布尔值的解构赋值"}},[a._v("#")]),a._v(" 1.2.4 数值和布尔值的解构赋值")]),a._v(" "),t("p",[a._v("解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 数值和布尔值的包装对象都有toString属性\nlet {toString: s} = 123;\ns === Number.prototype.toString // true\nlet {toString: s} = true;\ns === Boolean.prototype.toString // true\n\nlet { prop: x } = undefined; // TypeError\nlet { prop: y } = null;      // TypeError\n")])])]),t("h3",{attrs:{id:"_1-2-5-函数参数的解构赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-函数参数的解构赋值"}},[a._v("#")]),a._v(" 1.2.5 函数参数的解构赋值")]),a._v(" "),t("p",[a._v("基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun ([a, b]){\n    return a + b;\n}\nfun ([1, 2]); // 3\n")])])]),t("p",[a._v("指定默认值的解构:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun ({a=0, b=0} = {}){\n    return [a, b];\n}\nfun ({a:1, b:2}); // [1, 2]\nfun ({a:1});      // [1, 0]\nfun ({});         // [0, 0]\nfun ();           // [0, 0]\n\nfunction fun ({a, b} = {a:0, b:0}){\n    return [a, b];\n}\nfun ({a:1, b:2}); // [1, 2]\nfun ({a:1});      // [1, undefined]\nfun ({});         // [undefined, undefined]\nfun ();           // [0, 0]\n")])])]),t("h3",{attrs:{id:"_1-2-6-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-6-应用"}},[a._v("#")]),a._v(" 1.2.6 应用")]),a._v(" "),t("p",[a._v("交换变量的值:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 1,b = 2;\n[a, b] = [b, a]; // a =>2 , b => 1 \n")])])]),t("p",[a._v("函数返回多个值:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 返回一个数组\nfunction f (){\n    return [1, 2, 3];\n}\nlet [a, b, c] = f(); // a=>1, b=>2, c=>3\n\n// 返回一个对象\nfunction f (){\n    return {a:1, b:2};\n}\nlet {a, b} = f();    // a=>1, b=>2\n")])])]),t("p",[a._v("快速对应参数: 快速的将一组参数与变量名对应。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f([a, b, c]) {...}\nf([1, 2, 3]);\n\nfunction f({a, b, c}) {...}\nf({b:2, c:3, a:1});\n")])])]),t("p",[a._v("提取JSON数据：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let json = {\n    name : 'leo',\n    age: 18\n}\nlet {name, age} = json;\nconsole.log(name,age); // leo, 18\n")])])]),t("p",[a._v("遍历Map结构:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const m = new Map();\nm.set('a',1);\nm.set('b',2);\nfor (let [k, v] of m){\n    console.log(k + ' : ' + v);\n}\n// 获取键名\nfor (let [k] of m){...}\n// 获取键值\nfor (let [,k] of m){...}\n")])])]),t("p",[a._v("输入模块的指定方法: 用于按需加载模块中需要用到的方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const {log, sin, cos} = require('math');\n")])])]),t("h2",{attrs:{id:"_1-3-字符串的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-字符串的拓展"}},[a._v("#")]),a._v(" 1.3 字符串的拓展")]),a._v(" "),t("h3",{attrs:{id:"_1-3-1-includes-startswith-endswith"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-1-includes-startswith-endswith"}},[a._v("#")]),a._v(" 1.3.1 includes(),startsWith(),endsWith()")]),a._v(" "),t("p",[a._v("在我们判断字符串是否包含另一个字符串时，ES6之前，我们只有typeof方法，ES6之后我们又多了三种方法：")]),a._v(" "),t("p",[a._v("includes():返回布尔值，表示是否找到参数字符串。")]),a._v(" "),t("p",[a._v("startsWith():返回布尔值，表示参数字符串是否在原字符串的头部。")]),a._v(" "),t("p",[a._v("endsWith():返回布尔值，表示参数字符串是否在原字符串的尾部。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 'hello leo';\na.startsWith('leo');   // false\na.endsWith('o');       // true\na.includes('lo');      // true\n")])])]),t("p",[a._v("并且这三个方法都支持第二个参数，表示起始搜索的位置。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 'hello leo';\na.startsWith('leo',1);   // false\na.endsWith('o',5);       // true\na.includes('lo',6);      // false\n")])])]),t("p",[a._v("endsWith 是针对前 n 个字符，而其他两个是针对从第n个位置直到结束。")]),a._v(" "),t("h3",{attrs:{id:"_1-3-2-repeat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-2-repeat"}},[a._v("#")]),a._v(" 1.3.2 repeat()")]),a._v(" "),t("p",[a._v("repeat方法返回一个新字符串，表示将原字符串重复n次。\n基础用法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("'ab'.repeat(3);        // 'ababab'\n'ab'.repeat(0);        // ''\n\n特殊用法:\n\n参数为小数，则取整\n'ab'.repeat(2.3);      // 'abab'\n\n参数为负数或Infinity，则报错\n'ab'.repeat(-1);       // RangeError\n'ab'.repeat(Infinity); // RangeError\n\n参数为0到-1的小数或NaN，则取0\n'ab'.repeat(-0.5);     // ''\n'ab'.repeat(NaN);      // ''\n\n参数为字符串，则转成数字\n'ab'.repeat('ab');     // ''\n'ab'.repeat('3');      // 'ababab'\n")])])]),t("h3",{attrs:{id:"_1-3-3-padstart-padend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-3-padstart-padend"}},[a._v("#")]),a._v(" 1.3.3 padStart(),padEnd()")]),a._v(" "),t("p",[a._v("用于将字符串头部或尾部补全长度，padStart()为头部补全，padEnd()为尾部补全。")]),a._v(" "),t("p",[a._v("这两个方法接收2个参数，第一个指定字符串最小长度，第二个用于补全的字符串。")]),a._v(" "),t("p",[a._v("基础用法 ：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("'x'.padStart(5, 'ab');   // 'ababx'\n'x'.padEnd(5, 'ab');     // 'xabab'\n\n特殊用法:\n\n原字符串长度，大于或等于指定最小长度，则返回原字符串。\n'xyzabc'.padStart(5, 'ab'); // 'xyzabc'\n\n用来补全的字符串长度和原字符串长度之和，超过指定最小长度，则截去超出部分的补全字符串。\n'ab'.padStart(5,'012345'); // \"012ab\"\n\n省略第二个参数，则用空格补全。\n'x'.padStart(4);           // '    x'\n'x'.padEnd(4);           // 'x    '\n")])])]),t("h3",{attrs:{id:"_1-3-4-模版字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-4-模版字符串"}},[a._v("#")]),a._v(" 1.3.4 模版字符串")]),a._v(" "),t("p",[a._v("用于拼接字符串，ES6之前：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 'abc' + \n    'def' + \n    'ghi';\n\nES6之后：\n\nlet a = `\n    abc\n    def\n    ghi\n`\n\n拼接变量: 在**反引号(`)**中使用${}包裹变量或方法。\n\n// ES6之前\nlet a = 'abc' + v1 + 'def';\n\n// ES6之后\nlet a = `abc${v1}def`\n")])])]),t("h2",{attrs:{id:"_1-4-正则的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-正则的拓展"}},[a._v("#")]),a._v(" 1.4 正则的拓展")]),a._v(" "),t("h3",{attrs:{id:"_1-4-1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-介绍"}},[a._v("#")]),a._v(" 1.4.1 介绍")]),a._v(" "),t("p",[a._v("在ES5中有两种情况。")]),a._v(" "),t("p",[a._v("参数是字符串，则第二个参数为正则表达式的修饰符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new RegExp('abc', 'i');\n// 等价于\nlet a = /abx/i;\n")])])]),t("p",[a._v("参数是正则表达式，返回一个原表达式的拷贝，且不能有第二个参数，否则报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new RegExp(/abc/i);\n//等价于\nlet a = /abx/i;\n\nlet a = new RegExp(/abc/, 'i');\n//  Uncaught TypeError\n")])])]),t("p",[a._v("ES6中使用：\n第一个参数是正则对象，第二个是指定修饰符，如果第一个参数已经有修饰符，则会被第二个参数覆盖。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("new RegExp(/abc/ig, 'i');\n")])])]),t("h3",{attrs:{id:"_1-4-2-字符串的正则方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-字符串的正则方法"}},[a._v("#")]),a._v(" 1.4.2 字符串的正则方法")]),a._v(" "),t("p",[a._v("常用的四种方法：match()、replace()、search()和split()。")]),a._v(" "),t("h3",{attrs:{id:"_1-4-3-u修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-u修饰符"}},[a._v("#")]),a._v(" 1.4.3 u修饰符")]),a._v(" "),t("p",[a._v("添加u修饰符，是为了处理大于uFFFF的Unicode字符，即正确处理四个字节的UTF-16编码。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/^\\uD83D/u.test('\\uD83D\\uDC2A'); // false\n/^\\uD83D/.test('\\uD83D\\uDC2A');  // true\n")])])]),t("p",[a._v("由于ES5之前不支持四个字节UTF-16编码，会识别为两个字符，导致第二行输出true，加入u修饰符后ES6就会识别为一个字符，所以输出false。")]),a._v(" "),t("p",[a._v("注意：\n加上u修饰符后，会改变下面正则表达式的行为：")]),a._v(" "),t("p",[a._v("(1)点字符 点字符(.)在正则中表示除了换行符以外的任意单个字符。对于码点大于0xFFFF的Unicode字符，点字符不能识别，必须加上u修饰符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var a = "𠮷";\n/^.$/.test(a);  // false\n/^.$/u.test(a); // true\n')])])]),t("p",[a._v("(2)Unicode字符表示法 使用ES6新增的大括号表示Unicode字符时，必须在表达式添加u修饰符，才能识别大括号。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/\\u{61}/.test('a');      // false\n/\\u{61}/u.test('a');     // true\n/\\u{20BB7}/u.test('𠮷'); // true\n")])])]),t("p",[a._v("(3)量词 使用u修饰符后，所有量词都会正确识别码点大于0xFFFF的 Unicode 字符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/a{2}/.test('aa');    // true\n/a{2}/u.test('aa');   // true\n/𠮷{2}/.test('𠮷𠮷');  // false\n/𠮷{2}/u.test('𠮷𠮷'); // true\n")])])]),t("p",[a._v("(4)i修饰符 不加u修饰符，就无法识别非规范的K字符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/[a-z]/i.test('\\u212A') // false\n/[a-z]/iu.test('\\u212A') // true\n")])])]),t("p",[a._v("检查是否设置u修饰符： 使用unicode属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a = /hello/;\nconst b = /hello/u;\n\na.unicode // false\nb.unicode // true\n")])])]),t("h3",{attrs:{id:"_1-4-4-y修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-4-y修饰符"}},[a._v("#")]),a._v(" 1.4.4 y修饰符")]),a._v(" "),t("p",[a._v("y修饰符与g修饰符类似，也是全局匹配，后一次匹配都是从上一次匹配成功的下一个位置开始。区别在于，g修饰符只要剩余位置中存在匹配即可，而y修饰符是必须从剩余第一个开始。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var s = \'aaa_aa_a\';\nvar r1 = /a+/g;\nvar r2 = /a+/y;\n\nr1.exec(s) // ["aaa"]\nr2.exec(s) // ["aaa"]\n\nr1.exec(s) // ["aa"]  剩余 \'_aa_a\'\nr2.exec(s) // null\n')])])]),t("p",[a._v("lastIndex属性: 指定匹配的开始位置：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a = /a/y;\na.lastIndex = 2;  // 从2号位置开始匹配\na.exec('wahaha'); // null\na.lastIndex = 3;  // 从3号位置开始匹配\nlet c = a.exec('wahaha');\nc.index;          // 3\na.lastIndex;      // 4\n")])])]),t("p",[a._v("返回多个匹配：\n一个y修饰符对match方法只能返回第一个匹配，与g修饰符搭配能返回所有匹配。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('\'a1a2a3\'.match(/a\\d/y);  // ["a1"]\n\'a1a2a3\'.match(/a\\d/gy); // ["a1", "a2", "a3"]\n')])])]),t("p",[a._v("检查是否使用y修饰符：\n使用sticky属性检查。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a = /hello\\d/y;\na.sticky;     // true\n")])])]),t("h3",{attrs:{id:"_1-4-5-flags属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-5-flags属性"}},[a._v("#")]),a._v(" 1.4.5 flags属性")]),a._v(" "),t("p",[a._v("flags属性返回所有正则表达式的修饰符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("/abc/ig.flags;  // 'gi'\n")])])]),t("h2",{attrs:{id:"_1-5-数值的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-数值的拓展"}},[a._v("#")]),a._v(" 1.5 数值的拓展")]),a._v(" "),t("h3",{attrs:{id:"_1-5-1-number-isfinite-number-isnan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-1-number-isfinite-number-isnan"}},[a._v("#")]),a._v(" 1.5.1 Number.isFinite(), Number.isNaN()")]),a._v(" "),t("p",[a._v("Number.isFinite() 用于检查一个数值是否是有限的，即不是Infinity，若参数不是Number类型，则一律返回false 。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Number.isFinite(10);            // true\nNumber.isFinite(0.5);           // true\nNumber.isFinite(NaN);           // false\nNumber.isFinite(Infinity);      // false\nNumber.isFinite(-Infinity);     // false\nNumber.isFinite('leo');         // false\nNumber.isFinite('15');          // false\nNumber.isFinite(true);          // false\nNumber.isFinite(Math.random()); // true\n")])])]),t("p",[a._v("Number.isNaN()用于检查是否是NaN，若参数不是NaN，则一律返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Number.isNaN(NaN);      // true\nNumber.isNaN(10);       // false\nNumber.isNaN('10');     // false\nNumber.isNaN(true);     // false\nNumber.isNaN(5/NaN);    // true\nNumber.isNaN('true' / 0);      // true\nNumber.isNaN('true' / 'true'); // true\n")])])]),t("p",[a._v("区别：\n与传统全局的isFinite()和isNaN()方法的区别，传统的这两个方法，是先将参数转换成数值，再判断。\n而ES6新增的这两个方法则只对数值有效， Number.isFinite()对于非数值一律返回false,Number.isNaN()只有对于NaN才返回true，其他一律返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('isFinite(25);          // true\nisFinite("25");        // true\nNumber.isFinite(25);   // true\nNumber.isFinite("25"); // false\n\nisNaN(NaN);            // true\nisNaN("NaN");          // true\nNumber.isNaN(NaN);     // true\nNumber.isNaN("NaN");   // false\n')])])]),t("h3",{attrs:{id:"_1-5-2-number-parseint-number-parsefloat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-2-number-parseint-number-parsefloat"}},[a._v("#")]),a._v(" 1.5.2 Number.parseInt(), Number.parseFloat()")]),a._v(" "),t("p",[a._v("这两个方法与全局方法parseInt()和parseFloat()一致，目的是逐步减少全局性的方法，让语言更模块化。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("parseInt('12.34');     // 12\nparseFloat('123.45#'); // 123.45\n\nNumber.parseInt('12.34');     // 12\nNumber.parseFloat('123.45#'); // 123.45\n\nNumber.parseInt === parseInt;     // true\nNumber.parseFloat === parseFloat; // true\n")])])]),t("h3",{attrs:{id:"_1-5-3-number-isinteger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-3-number-isinteger"}},[a._v("#")]),a._v(" 1.5.3 Number.isInteger()")]),a._v(" "),t("p",[a._v("用来判断一个数值是否是整数，若参数不是数值，则返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Number.isInteger(10);   // true\nNumber.isInteger(10.0); // true\nNumber.isInteger(10.1); // false\n")])])]),t("h3",{attrs:{id:"_1-5-4-math对象的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-4-math对象的拓展"}},[a._v("#")]),a._v(" 1.5.4 Math对象的拓展")]),a._v(" "),t("p",[a._v("ES6新增17个数学相关的静态方法，只能在Math对象上调用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.trunc:\n用来去除小数的小数部分，返回整数部分。\n若参数为非数值，则先转为数值。\n若参数为空值或无法截取整数的值，则返回NaN。\n// 正常使用\nMath.trunc(1.1);     // 1\nMath.trunc(1.9);     // 1\nMath.trunc(-1.1);    // -1\nMath.trunc(-1.9);    // -1\nMath.trunc(-0.1234); // -0\n\n// 参数为非数值\nMath.trunc('11.22'); // 11\nMath.trunc(true);    // 1\nMath.trunc(false);   // 0\nMath.trunc(null);    // 0\n\n// 参数为空和无法取整\nMath.trunc(NaN);       // NaN\nMath.trunc('leo');     // NaN\nMath.trunc();          // NaN\nMath.trunc(undefined); // NaN\n")])])]),t("p",[a._v("ES5实现：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.trunc = Math.trunc || function(x){\n    return x < 0 ? Math.ceil(x) : Math.floor(x);\n}\n")])])]),t("p",[a._v("Math.sign():")]),a._v(" "),t("p",[a._v("判断一个数是正数、负数还是零，对于非数值，会先转成数值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("返回值：\n参数为正数， 返回 +1\n参数为负数， 返回 -1\n参数为0， 返回 0\n参数为-0， 返回 -0\n参数为其他值， 返回 NaN\nMath.sign(-1);   // -1\nMath.sign(1);    // +1\nMath.sign(0);    // 0\nMath.sign(-0);   // -0\nMath.sign(NaN);  // NaN\n\nMath.sign('');   // 0\nMath.sign(true); // +1\nMath.sign(false);// 0\nMath.sign(null); // 0\nMath.sign('9');  // +1\nMath.sign('leo');// NaN\nMath.sign();     // NaN\nMath.sign(undefined); // NaN\n")])])]),t("p",[a._v("ES5实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.sign = Math.sign || function (x){\n    x = +x;\n    if (x === 0 || isNaN(x)){\n        return x;\n    }\n    return x > 0 ? 1: -1;\n}\n")])])]),t("p",[a._v("Math.cbrt():\n用来计算一个数的立方根，若参数为非数值则先转成数值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.cbrt(-1); // -1\nMath.cbrt(0);  // 0\nMath.cbrt(1);  // 1\nMath.cbrt(2);  // 1.2599210498\n\nMath.cbrt('1');   // 1\nMath.cbrt('leo'); // NaN\n")])])]),t("p",[a._v("ES5实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.cbrt = Math.cbrt || function (x){\n    var a = Math.pow(Math.abs(x), 1/3);\n    return x < 0 ? -y : y;\n}\n")])])]),t("p",[a._v("Math.clz32():\n用于返回一个数的 32 位无符号整数形式有多少个前导 0。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.clz32(0) // 32\nMath.clz32(1) // 31\nMath.clz32(1000) // 22\nMath.clz32(0b01000000000000000000000000000000) // 1\nMath.clz32(0b00100000000000000000000000000000) // 2\n")])])]),t("p",[a._v("Math.imul():\n用于返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位的带符号整数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.imul(2, 4)   // 8\nMath.imul(-1, 8)  // -8\nMath.imul(-2, -2) // 4\n")])])]),t("p",[a._v("Math.fround():\n用来返回一个数的2位单精度浮点数形式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.fround(0)   // 0\nMath.fround(1)   // 1\nMath.fround(2 ** 24 - 1)   // 16777215\n")])])]),t("p",[a._v("Math.hypot():\n用来返回所有参数的平方和的平方根。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.hypot(3, 4);        // 5\nMath.hypot(3, 4, 5);     // 7.0710678118654755\nMath.hypot();            // 0\nMath.hypot(NaN);         // NaN\nMath.hypot(3, 4, 'foo'); // NaN\nMath.hypot(3, 4, '5');   // 7.0710678118654755\nMath.hypot(-3);          // 3\n")])])]),t("p",[a._v("Math.expm1():\n用来返回ex - 1，即Math.exp(x) - 1。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.expm1(-1) // -0.6321205588285577\nMath.expm1(0)  // 0\nMath.expm1(1)  // 1.718281828459045\n")])])]),t("p",[a._v("ES5实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.expm1 = Math.expm1 || function(x) {\n  return Math.exp(x) - 1;\n};\n")])])]),t("p",[a._v("Math.log1p():\n用来返回1 + x的自然对数，即Math.log(1 + x)。如果x小于-1，返回NaN。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.log1p(1)  // 0.6931471805599453\nMath.log1p(0)  // 0\nMath.log1p(-1) // -Infinity\nMath.log1p(-2) // NaN\n")])])]),t("p",[a._v("ES5实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.log1p = Math.log1p || function(x) {\n  return Math.log(1 + x);\n};\n")])])]),t("p",[a._v("Math.log10():\n用来返回以 10为底的x的对数。如果x小于 0，则返回 NaN。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.log10(2)      // 0.3010299956639812\nMath.log10(1)      // 0\nMath.log10(0)      // -Infinity\nMath.log10(-2)     // NaN\nMath.log10(100000) // 5\n")])])]),t("p",[a._v("ES5实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.log10 = Math.log10 || function(x) {\n  return Math.log(x) / Math.LN10;\n};\n")])])]),t("p",[a._v("Math.log2():\n用来返回以 2 为底的x的对数。如果x小于0，则返回 NaN。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.log2(3)       // 1.584962500721156\nMath.log2(2)       // 1\nMath.log2(1)       // 0\nMath.log2(0)       // -Infinity\nMath.log2(-2)      // NaN\nMath.log2(1024)    // 10\nMath.log2(1 << 29) // 29\n")])])]),t("p",[a._v("ES5实现")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.log2 = Math.log2 || function(x) {\n  return Math.log(x) / Math.LN2;\n};\n")])])]),t("p",[a._v("双曲函数方法:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.sinh(x) 返回x的双曲正弦（hyperbolic sine）\nMath.cosh(x) 返回x的双曲余弦（hyperbolic cosine）\nMath.tanh(x) 返回x的双曲正切（hyperbolic tangent）\nMath.asinh(x) 返回x的反双曲正弦（inverse hyperbolic sine）\nMath.acosh(x) 返回x的反双曲余弦（inverse hyperbolic cosine）\nMath.atanh(x) 返回x的反双曲正切（inverse hyperbolic tangent）\n")])])]),t("h3",{attrs:{id:"_1-5-5-指数运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-5-指数运算符"}},[a._v("#")]),a._v(" 1.5.5 指数运算符")]),a._v(" "),t("p",[a._v("新增的指数运算符(**):")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("2 ** 2; // 4\n2 ** 3; // 8 \n\n2 ** 3 ** 2; // 相当于 2 ** (3 ** 2); 返回 512\n")])])]),t("p",[a._v("指数运算符(**)与Math.pow的实现不相同，对于特别大的运算结果，两者会有细微的差异。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Math.pow(99, 99)\n// 3.697296376497263e+197\n\n99 ** 99\n// 3.697296376497268e+197\n")])])]),t("h2",{attrs:{id:"_1-6-函数的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-函数的拓展"}},[a._v("#")]),a._v(" 1.6 函数的拓展")]),a._v(" "),t("h3",{attrs:{id:"_1-6-1-参数默认值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-参数默认值"}},[a._v("#")]),a._v(" 1.6.1 参数默认值")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ES6 之前\nfunction f(a, b){\n    b = b || 'leo';\n    console.log(a, b);\n}\n\n// ES6 之后\nfunction f(a, b='leo'){\n    console.log(a, b);\n}\n\nf('hi');          // hi leo\nf('hi', 'jack');  // hi jack\nf('hi', '');      // hi leo\n")])])]),t("p",[a._v("::: tip 注意:\n参数变量是默认声明的，不能用let和const再次声明：\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (a = 1){\n    let a = 2; // error\n}\n")])])]),t("p",[a._v("使用参数默认值时，参数名不能相同：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (a, a, b){ ... };     // 不报错\nfunction f (a, a, b = 1){ ... }; // 报错\n")])])]),t("p",[a._v("与解构赋值默认值结合使用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f ({a, b=1}){\n    console.log(a,b)\n};\nf({});         // undefined 1\nf({a:2});      // 2 1\nf({a:2, b:3}); // 2 3\nf();           // 报错\n\nfunction f ({a, b = 1} = {}){\n    console.log(a, b)\n}\nf();  // undefined 1\n")])])]),t("p",[a._v("尾参数定义默认值:\n通常在尾参数定义默认值，便于观察参数，并且非尾参数无法省略。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (a=1,b){\n    return [a, b];\n}\nf();    // [1, undefined]\nf(2);   // [2, undefined]\nf(,2);  // 报错\n\nf(undefined, 2);  // [1, 2]\n\nfunction f (a, b=1, c){\n    return [a, b, c];\n}\nf();        // [undefined, 1, undefined]\nf(1);       // [1,1,undefined]\nf(1, ,2);   // 报错\nf(1,undefined,2); // [1,1,2]\n")])])]),t("p",[a._v("在给参数传递默认值时，传入undefined会触发默认值，传入null不会触发。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (a = 1, b = 2){\n    console.log(a, b);\n}\nf(undefined, null); // 1 null\n")])])]),t("p",[a._v("函数的length属性:\nlength属性将返回，没有指定默认值的参数数量，并且rest参数不计入length属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f1 (a){...};\nfunction f2 (a=1){...};\nfunction f3 (a, b=2){...};\nfunction f4 (...a){...};\nfunction f5 (a,b,...c){...};\n\nf1.length; // 1\nf2.length; // 0\nf3.length; // 1\nf4.length; // 0\nf5.length; // 2\n")])])]),t("h3",{attrs:{id:"_1-6-2-rest-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-rest-参数"}},[a._v("#")]),a._v(" 1.6.2 rest 参数")]),a._v(" "),t("p",[a._v("rest参数形式为（...变量名），其值为一个数组，用于获取函数多余参数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (a, ...b){\n    console.log(a, b);\n}\nf(1,2,3,4); // 1 [2, 3, 4]\n")])])]),t("p",[a._v("::: tip 注意：\nrest参数只能放在最后一个，否则报错：\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f(a, ...b, c){...}; // 报错 \n\n函数的length属性不包含rest参数。\nfunction f1 (a){...};\nfunction f2 (a,...b){...};\nf1(1);   // 1\nf2(1,2); // 1\n")])])]),t("h3",{attrs:{id:"_1-6-3-name-属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-name-属性"}},[a._v("#")]),a._v(" 1.6.3 name 属性")]),a._v(" "),t("p",[a._v("用于返回该函数的函数名。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (){...};\nf.name;    // f\n\nconst f = function g(){...};\nf.name;    // g\n")])])]),t("h3",{attrs:{id:"_1-6-4-箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-4-箭头函数"}},[a._v("#")]),a._v(" 1.6.4 箭头函数")]),a._v(" "),t("p",[a._v("使用“箭头”(=>)定义函数。\n基础使用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 有1个参数\nlet f = v => v;\n// 等同于\nlet f = function (v){return v};\n\n// 有多个参数\nlet f = (v, i) => {return v + i};\n// 等同于\nlet f = function (v, i){return v + i};\n\n// 没参数\nlet f = () => 1;\n// 等同于\nlet f = function (){return 1};\n")])])]),t("p",[a._v("箭头函数与变量结构结合使用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 正常函数写法\nfunction f (p) {\n    return p.a + ':' + p.b;\n}\n\n// 箭头函数写法\nlet f = ({a, b}) => a + ':' + b;\n\n简化回调函数：\n\n// 正常函数写法\n[1, 2, 3].map(function (x){\n    return x * x;\n})\n\n\n// 箭头函数写法\n[1, 2, 3].map(x => x * x);\n\n箭头函数与rest参数结合：\n\nlet f = (...n) => n;\nf(1, 2, 3); // [1, 2, 3]\n")])])]),t("p",[a._v("::: tip 注意点：")]),a._v(" "),t("ol",[t("li",[a._v("箭头函数内的this总是指向定义时所在的对象，而不是调用时。")]),a._v(" "),t("li",[a._v("箭头函数不能当做构造函数，即不能用new命令，否则报错。")]),a._v(" "),t("li",[a._v("箭头函数不存在arguments对象，即不能使用，可以使用rest参数代替。")]),a._v(" "),t("li",[a._v("箭头函数不能使用yield命令，即不能用作Generator函数。\n:::\n不适用场景：")])]),a._v(" "),t("p",[a._v("1.在定义函数方法，且该方法内部包含this。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const obj = {\n    a:9,\n    b: () => {\n        this.a --;\n    }\n}\n")])])]),t("p",[a._v("上述b如果是普通函数，函数内部的this指向obj，但是如果是箭头函数，则this会指向全局，不是预期结果。")]),a._v(" "),t("p",[a._v("2.需要动态this时。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let b = document.getElementById('myID');\nb.addEventListener('click', ()=>{\n    this.classList.toggle('on');\n})\n")])])]),t("p",[a._v("上诉按钮点击会报错，因为b监听的箭头函数中，this是全局对象，若改成普通函数，this就会指向被点击的按钮对象。")]),a._v(" "),t("p",[a._v("1.6.5 双冒号运算符\n双冒号暂时是一个提案，用于解决一些不适用的场合，取代call、apply、bind调用。\n双冒号运算符(::)的左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境(即this对象)，绑定到右边函数上。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("f::b;\n// 等同于\nb.bind(f);\n\nf::b(...arguments);\n// 等同于\nb.apply(f, arguments);\n")])])]),t("p",[a._v("若双冒号左边为空，右边是一个对象的方法，则等于将该方法绑定到该对象上。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let f = a::a.b;\n// 等同于\nlet f = ::a.b;\n")])])]),t("h2",{attrs:{id:"_1-7-数组的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-数组的拓展"}},[a._v("#")]),a._v(" 1.7 数组的拓展")]),a._v(" "),t("h3",{attrs:{id:"_1-7-1-拓展运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-1-拓展运算符"}},[a._v("#")]),a._v(" 1.7.1 拓展运算符")]),a._v(" "),t("p",[a._v("拓展运算符使用(...)，类似rest参数的逆运算，将数组转为用(,)分隔的参数序列。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("console.log(...[1, 2, 3]);   // 1 2 3 \nconsole.log(1, ...[2,3], 4); // 1 2 3 4\n")])])]),t("p",[a._v("拓展运算符主要使用在函数调用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (a, b){\n    console.log(a, b);\n}\nf(...[1, 2]); // 1 2\n\nfunction g (a, b, c, d, e){\n    console.log(a, b, c, d, e);\n}\ng(0, ...[1, 2], 3, ...[4]); // 0 1 2 3 4\n")])])]),t("p",[a._v("若拓展运算符后面是个空数组，则不产生效果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[...[], 1]; // [1]\n")])])]),t("p",[a._v("替代apply方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ES6之前\nfunction f(a, b, c){...};\nvar a = [1, 2, 3];\nf.apply(null, a);\n\n// ES6之后\nfunction f(a, b, c){...};\nlet a = [1, 2, 3];\nf(...a);\n\n// ES6之前\nMath.max.apply(null, [3,2,6]);\n\n// ES6之后\nMath.max(...[3,2,6]);\n")])])]),t("p",[a._v("拓展运算符的运用")]),a._v(" "),t("p",[a._v("(1)复制数组：\n通常我们直接复制数组时，只是浅拷贝，如果要实现深拷贝，可以使用拓展运算符。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 通常情况 浅拷贝\nlet a1 = [1, 2];\nlet a2 = a1; \na2[0] = 3;\nconsole.log(a1,a2); // [3,2] [3,2]\n\n// 拓展运算符 深拷贝\nlet a1 = [1, 2];\nlet a2 = [...a1];\n// let [...a2] = a1; // 作用相同\na2[0] = 3;\nconsole.log(a1,a2); // [1,2] [3,2]\n")])])]),t("p",[a._v("(2)合并数组：\n注意，这里合并数组，只是浅拷贝。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a1 = [1,2];\nlet a2 = [3];\nlet a3 = [4,5];\n\n// ES5 \nlet a4 = a1.concat(a2, a3);\n\n// ES6\nlet a5 = [...a1, ...a2, ...a3];\n\na4[0] === a1[0]; // true\na5[0] === a1[0]; // true\n")])])]),t("p",[a._v("(3)与解构赋值结合：\n与解构赋值结合生成数组，但是使用拓展运算符需要放到参数最后一个，否则报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let [a, ...b] = [1, 2, 3, 4]; \n// a => 1  b => [2,3,4]\n\nlet [a, ...b] = [];\n// a => undefined b => []\n\nlet [a, ...b] = ["abc"];\n// a => "abc"  b => []\n')])])]),t("h3",{attrs:{id:"_1-7-2-array-from"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-2-array-from"}},[a._v("#")]),a._v(" 1.7.2 Array.from()")]),a._v(" "),t("p",[a._v("将 类数组对象 和 可遍历的对象，转换成真正的数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 类数组对象\nlet a = {\n    '0':'a',\n    '1':'b',\n    length:2\n}\nlet arr = Array.from(a);\n\n// 可遍历的对象\nlet a = Array.from([1,2,3]);\nlet b = Array.from({length: 3});\nlet c = Array.from([1,2,3]).map(x => x * x);\nlet d = Array.from([1,2,3].map(x => x * x));\n")])])]),t("h3",{attrs:{id:"_1-7-3-array-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-3-array-of"}},[a._v("#")]),a._v(" 1.7.3 Array.of()")]),a._v(" "),t("p",[a._v("将一组数值，转换成数组，弥补Array方法参数不同导致的差异。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.of(1,2,3);    // [1,2,3]\nArray.of(1).length; // 1\n\nArray();       // []\nArray(2);      // [,] 1个参数时，为指定数组长度\nArray(1,2,3);  // [1,2,3] 多于2个参数，组成新数组\n")])])]),t("h3",{attrs:{id:"_1-7-4-find-和findindex"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-4-find-和findindex"}},[a._v("#")]),a._v(" 1.7.4 find()和findIndex()")]),a._v(" "),t("p",[a._v("find()方法用于找出第一个符合条件的数组成员，参数为一个回调函数，所有成员依次执行该回调函数，返回第一个返回值为true的成员，如果没有一个符合则返回undefined。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1,2,3,4,5].find( a => a < 3 ); // 1\n")])])]),t("p",[a._v("回调函数接收三个参数，当前值、当前位置和原数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1,2,3,4,5].find((value, index, arr) => {\n    // ...\n});\n")])])]),t("p",[a._v("findIndex()方法与find()类似，返回第一个符合条件的数组成员的位置，如果都不符合则返回-1。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1,2,3,4].findIndex((v,i,a)=>{\n    return v>2;\n}); // 2\n")])])]),t("p",[a._v("###1.7.5 fill()\n用于用指定值填充一个数组，通常用来初始化空数组，并抹去数组中已有的元素。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("new Array(3).fill('a');   // ['a','a','a']\n[1,2,3].fill('a');        // ['a','a','a']\n")])])]),t("p",[a._v("并且fill()的第二个和第三个参数指定填充的起始位置和结束位置。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1,2,3].fill('a',1,2); //  [1, \"a\", 3]\n")])])]),t("h3",{attrs:{id:"_1-7-6-entries-keys-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-6-entries-keys-values"}},[a._v("#")]),a._v(" 1.7.6 entries(),keys(),values()")]),a._v(" "),t("p",[a._v("主要用于遍历数组，entries()对键值对遍历，keys()对键名遍历，values()对键值遍历。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for (let i of ['a', 'b'].keys()){\n    console.log(i)\n}\n// 0\n// 1\n\nfor (let e of ['a', 'b'].values()){\n    console.log(e)\n}\n// 'a'\n// 'b'\n\nfor (let e of ['a', 'b'].entries()){\n    console.log(e)\n}\n// [0, \"a\"] \n// [1, \"b\"]\n")])])]),t("h3",{attrs:{id:"_1-7-7-includes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-7-includes"}},[a._v("#")]),a._v(" 1.7.7 includes()")]),a._v(" "),t("p",[a._v("用于表示数组是否包含给定的值，与字符串的includes方法类似。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1,2,3].includes(2);     // true\n[1,2,3].includes(4);     // false\n[1,2,NaN].includes(NaN); // true\n")])])]),t("p",[a._v("第二个参数为起始位置，默认为0，如果负数，则表示倒数的位置，如果大于数组长度，则重置为0开始。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1,2,3].includes(3,3);    // false\n[1,2,3].includes(3,4);    // false\n[1,2,3].includes(3,-1);   // true\n[1,2,3].includes(3,-4);   // true\n")])])]),t("h3",{attrs:{id:"_1-7-8-flat-flatmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-8-flat-flatmap"}},[a._v("#")]),a._v(" 1.7.8 flat(),flatMap()")]),a._v(" "),t("p",[a._v("flat()用于将数组一维化，返回一个新数组，不影响原数组。")]),a._v(" "),t("p",[a._v("默认一次只一维化一层数组，若需多层，则传入一个整数参数指定层数。")]),a._v(" "),t("p",[a._v("若要一维化所有层的数组，则传入Infinity作为参数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1, 2, [2,3]].flat();        // [1,2,2,3]\n[1,2,[3,[4,[5,6]]]].flat(3); // [1,2,3,4,5,6]\n[1,2,[3,[4,[5,6]]]].flat('Infinity'); // [1,2,3,4,5,6]\n")])])]),t("p",[a._v("flatMap()是将原数组每个对象先执行一个函数，在对返回值组成的数组执行flat()方法，返回一个新数组，不改变原数组。\nflatMap()只能展开一层。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[2, 3, 4].flatMap((x) => [x, x * 2]); \n// [2, 4, 3, 6, 4, 8] \n")])])]),t("h2",{attrs:{id:"_1-8-对象的拓展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-对象的拓展"}},[a._v("#")]),a._v(" 1.8 对象的拓展")]),a._v(" "),t("h3",{attrs:{id:"_1-8-1-属性的简洁表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-1-属性的简洁表示"}},[a._v("#")]),a._v(" 1.8.1 属性的简洁表示")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 'a1';\nlet b = { a };  // b => { a : 'a1' }\n// 等同于\nlet b = { a : a };\n\nfunction f(a, b){\n    return {a, b}; \n}\n// 等同于\nfunction f (a, b){\n    return {a:a ,b:b};\n}\n\nlet a = {\n    fun () {\n        return 'leo';\n    }\n}\n// 等同于\nlet a = {\n    fun : function(){\n        return 'leo';\n    }\n}\n")])])]),t("h3",{attrs:{id:"_1-8-2-属性名表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-2-属性名表达式"}},[a._v("#")]),a._v(" 1.8.2 属性名表达式")]),a._v(" "),t("p",[a._v("JavaScript提供2种方法定义对象的属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 方法1 标识符作为属性名\na.f = true;\n\n// 方法2 字符串作为属性名\na['f' + 'un'] = true;\n \n延伸出来的还有：\n\nlet a = 'hi leo';\nlet b = {\n    [a]: true,\n    ['a'+'bc']: 123,\n    ['my' + 'fun'] (){\n        return 'hi';\n    }\n};\n// b.a => undefined ; b.abc => 123 ; b.myfun() => 'hi'\n// b[a] => true ; b['abc'] => 123 ; b['myfun'] => ƒ ['my' + 'fun'] (){ return 'hi'; }\n")])])]),t("p",[a._v("::: tip 注意：\n属性名表达式不能与简洁表示法同时使用，否则报错。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 报错\nlet a1 = 'aa';\nlet a2 = 'bb';\nlet b1 = {[a1]};\n\n// 正确\nlet a1 = 'aa';\nlet b1 = { [a1] : 'bb'};\n")])])]),t("h3",{attrs:{id:"_1-8-3-object-is"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-3-object-is"}},[a._v("#")]),a._v(" 1.8.3 Object.is()")]),a._v(" "),t("p",[a._v("Object.is() 用于比较两个值是否严格相等，在ES5时候只要使用相等运算符(==)和严格相等运算符(===)就可以做比较，但是它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Object.is('a','a');   // true\nObject.is({}, {});    // false\n\n// ES5\n+0 === -0 ;           // true\nNaN === NaN;          // false\n\n// ES6\nObject.is(+0,-0);     // false\nObject.is(NaN,NaN);   // true\n")])])]),t("h3",{attrs:{id:"_1-8-4-object-assign"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-4-object-assign"}},[a._v("#")]),a._v(" 1.8.4 Object.assign()")]),a._v(" "),t("p",[a._v("Object.assign()方法用于对象的合并，将原对象的所有可枚举属性复制到目标对象。\n基础用法：\n第一个参数是目标对象，后面参数都是源对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {a:1};\nlet b = {b:2};\nObject.assign(a,b);  // a=> {a:1,b:2}\n")])])]),t("p",[a._v("::: tip 注意：\n若目标对象与源对象有同名属性，则后面属性会覆盖前面属性。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {a:1, b:2};\nlet b = {b:3, c:4};\nObject.assign(a, b); // a => {a:1, b:3, c:4}\n")])])]),t("p",[a._v("若只有一个参数，则返回该参数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {a:1};\nObject.assign(a) === a;  // true\n")])])]),t("p",[a._v("若参数不是对象，则先转成对象后返回。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("typeof Object.assign(2); // 'object'\n")])])]),t("p",[a._v("由于undefined或NaN无法转成对象，所以做为参数会报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Object.assign(undefined) // 报错\nObject.assign(NaN);      // 报错\n \nObject.assign()实现的是浅拷贝。\nObject.assign()拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\nlet a = {a: {b:1}};\nlet b = Object.assign({},a);\na.a.b = 2;\nconsole.log(b.a.b);  // 2\n")])])]),t("p",[a._v("将数组当做对象处理，键名为数组下标，键值为数组下标对应的值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Object.assign([1, 2, 3], [4, 5]); // [4, 5, 3]\n")])])]),t("h2",{attrs:{id:"_1-9-symbol"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-symbol"}},[a._v("#")]),a._v(" 1.9 Symbol")]),a._v(" "),t("h3",{attrs:{id:"_1-9-1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-1-介绍"}},[a._v("#")]),a._v(" 1.9.1 介绍")]),a._v(" "),t("p",[a._v("ES6引入Symbol作为一种新的原始数据类型，表示独一无二的值，主要是为了防止属性名冲突。")]),a._v(" "),t("p",[a._v("ES6之后，JavaScript一共有其中数据类型：Symbol、undefined、null、Boolean、String、Number、Object。")]),a._v(" "),t("p",[a._v("简单实用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let a = Symbol();\ntypeof a; // "symbol"\n')])])]),t("p",[a._v("::: tip 注意：")]),a._v(" "),t("p",[a._v("Symbol函数不能用new，会报错。由于Symbol是一个原始类型，不是对象，所以不能添加属性，它是类似于字符串的数据类型。\nSymbol都是不相等的，即使参数相同。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 没有参数\nlet a1 = Symbol();\nlet a2 = Symbol();\na1 === a2; // false \n\n// 有参数\nlet a1 = Symbol('abc');\nlet a2 = Symbol('abc');\na1 === a2; // false \n")])])]),t("p",[a._v("Symbol不能与其他类型的值计算，会报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = Symbol('hello');\na + \" world!\";  // 报错\n`${a} world!`;  // 报错\n")])])]),t("p",[a._v("Symbol可以显式转换为字符串：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('let a1 = Symbol(\'hello\');\n\nString(a1);    // "Symbol(hello)"\na1.toString(); // "Symbol(hello)"\n')])])]),t("p",[a._v("Symbol可以转换为布尔值，但不能转为数值：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a1 = Symbol();\nBoolean(a1);\n!a1;        // false\n\nNumber(a1); // TypeError\na1 + 1 ;    // TypeError\n")])])]),t("h3",{attrs:{id:"_1-9-2-symbol作为属性名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-2-symbol作为属性名"}},[a._v("#")]),a._v(" 1.9.2 Symbol作为属性名")]),a._v(" "),t("p",[a._v("好处：防止同名属性，还有防止键被改写或覆盖。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a1 = Symbol();\n\n// 写法1\nlet b = {};\nb[a1] = 'hello';\n\n// 写法2\nlet b = {\n    [a1] : 'hello'\n} \n\n// 写法3\nlet b = {};\nObject.defineProperty(b, a1, {value : 'hello' });\n\n// 3种写法 结果相同\nb[a1]; // 'hello'\n")])])]),t("p",[a._v("需要注意： Symbol作为对象属性名时，不能用点运算符，并且必须放在方括号内。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = Symbol();\nlet b = {};\n\n// 不能用点运算\nb.a = 'hello';\nb[a] ; // undefined\nb['a'] ; // 'hello'\n\n// 必须放在方括号内\nlet c = {\n    [a] : function (text){\n        console.log(text);\n    }\n}\nc[a]('leo'); // 'leo'\n\n// 上面等价于 更简洁\nlet c = {\n    [a](text){\n        console.log(text);\n    }\n}\n")])])]),t("p",[a._v("常常还用于创建一组常量，保证所有值不相等：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {};\na.a1 = {\n    AAA: Symbol('aaa'),\n    BBB: Symbol('bbb'),\n    CCC: Symbol('ccc')\n}\n")])])]),t("h3",{attrs:{id:"_1-9-3-应用：消除魔术字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-3-应用：消除魔术字符串"}},[a._v("#")]),a._v(" 1.9.3 应用：消除魔术字符串")]),a._v(" "),t("p",[a._v("魔术字符串：指代码中多次出现，强耦合的字符串或数值，应该避免，而使用含义清晰的变量代替。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f(a){\n    if(a == 'leo') {\n        console.log('hello');\n    }\n}\nf('leo');   // 'leo' 为魔术字符串\n")])])]),t("p",[a._v("常使用变量，消除魔术字符串：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let obj = {\n    name: 'leo'\n};\nfunction f (a){\n    if(a == obj.name){\n        console.log('hello');\n    }\n}\nf(obj.name); // 'leo'\n")])])]),t("p",[a._v("使用Symbol消除强耦合，使得不需关系具体的值:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let obj = {\n    name: Symbol()\n};\nfunction f (a){\n    if(a == obj.name){\n        console.log('hello');\n    }\n}\nf(obj.name);\n")])])]),t("h3",{attrs:{id:"_1-9-4-属性名遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-4-属性名遍历"}},[a._v("#")]),a._v(" 1.9.4 属性名遍历")]),a._v(" "),t("p",[a._v("Symbol作为属性名遍历，不出现在for...in、for...of循环，也不被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = Symbol('aa'),b= Symbol('bb');\nlet obj = {\n    [a]:'11', [b]:'22'\n}\nfor(let k of Object.values(obj)){console.log(k)}\n// 无输出\n\nlet obj = {};\nlet aa = Symbol('leo');\nObject.defineProperty(obj, aa, {value: 'hi'});\n\nfor(let k in obj){\n    console.log(k); // 无输出\n}\n\nObject.getOwnPropertyNames(obj);   // []\nObject.getOwnPropertySymbols(obj); // [Symbol(leo)]\n \nObject.getOwnPropertySymbols方法返回一个数组，包含当前对象所有用做属性名的Symbol值。\n\nlet a = {};\nlet a1 = Symbol('a');\nlet a2 = Symbol('b');\na[a1] = 'hi';\na[a2] = 'oi';\n\nlet obj = Object.getOwnPropertySymbols(a);\nobj; //  [Symbol(a), Symbol(b)]\n")])])]),t("p",[a._v("另外可以使用Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和 Symbol 键名。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {\n    [Symbol('leo')]: 1,\n    aa : 2, \n    bb : 3,\n}\nReflect.ownKeys(a); // ['aa', 'bb',Symbol('leo')]\n")])])]),t("p",[a._v("由于Symbol值作为名称的属性不被常规方法遍历获取，因此常用于定义对象的一些非私有，且内部使用的方法。")]),a._v(" "),t("h3",{attrs:{id:"_1-9-5-symbol-for-、symbol-keyfor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-5-symbol-for-、symbol-keyfor"}},[a._v("#")]),a._v(" 1.9.5 Symbol.for()、Symbol.keyFor()")]),a._v(" "),t("p",[a._v("Symbol.for()\n用于重复使用一个Symbol值，接收一个字符串作为参数，若存在用此参数作为名称的Symbol值，返回这个Symbol，否则新建并返回以这个参数为名称的Symbol值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = Symbol.for('aaa');\nlet b = Symbol.for('aaa');\n\na === b;  // true\n \nSymbol() 和 Symbol.for()区别：\n\nSymbol.for('aa') === Symbol.for('aa'); // true\nSymbol('aa') === Symbol('aa');         // false\n \nSymbol.keyFor()\n// 用于返回一个已使用的Symbol类型的key:\nlet a = Symbol.for('aa');\nSymbol.keyFor(a);   //  'aa'\n\nlet b = Symbol('aa');\nSymbol.keyFor(b);   //  undefined\n")])])]),t("h3",{attrs:{id:"_1-9-6-内置的symbol值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-6-内置的symbol值"}},[a._v("#")]),a._v(" 1.9.6 内置的Symbol值")]),a._v(" "),t("p",[a._v("ES6提供11个内置的Symbol值，指向语言内部使用的方法：")]),a._v(" "),t("p",[a._v("1.Symbol.hasInstance\n当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。比如，foo instanceof Foo在语言内部，实际调用的是Foo"),t("a",{attrs:{href:"foo"}},[a._v("Symbol.hasInstance")]),a._v("。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    [Symbol.hasInstance](a){\n        return a instanceof Array;\n    }\n}\n[1, 2, 3] instanceof new P(); // true\n")])])]),t("p",[a._v("P是一个类，new P()会返回一个实例，该实例的Symbol.hasInstance方法，会在进行instanceof运算时自动调用，判断左侧的运算子是否为Array的实例。")]),a._v(" "),t("p",[a._v("2.Symbol.isConcatSpreadable\n值为布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = ['aa','bb'];\n['cc','dd'].concat(a, 'ee'); \n// ['cc', 'dd', 'aa', 'bb', 'ee']\na[Symbol.isConcatSpreadable]; // undefined\n\nlet b = ['aa','bb']; \nb[Symbol.isConcatSpreadable] = false; \n['cc','dd'].concat(b, 'ee'); \n// ['cc', 'dd',[ 'aa', 'bb'], 'ee']\n")])])]),t("p",[a._v("3.Symbol.species\n指向一个构造函数，在创建衍生对象时会使用，使用时需要用get取值器。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P extends Array {\n    static get [Symbol.species](){\n        return this;\n    }\n}\n")])])]),t("p",[a._v("解决下面问题：")]),a._v(" "),t("p",[a._v("// 问题：  b应该是 Array 的实例，实际上是 P 的实例")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P extends Array{}\n\nlet a = new P(1,2,3);\nlet b = a.map(x => x);\n\nb instanceof Array; // true\nb instanceof P; // true\n\n// 解决：  通过使用 Symbol.species\nclass P extends Array {\n  static get [Symbol.species]() { return Array; }\n}\nlet a = new P();\nlet b = a.map(x => x);\nb instanceof P;     // false\nb instanceof Array; // true\n")])])]),t("p",[a._v("4.Symbol.match\n当执行str.match(myObject)，传入的属性存在时会调用，并返回该方法的返回值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    [Symbol.match](string){\n        return 'hello world'.indexOf(string);\n    }\n}\n'h'.match(new P());   // 0\n")])])]),t("p",[a._v("5.Symbol.replace 当该对象被String.prototype.replace方法调用时，会返回该方法的返回值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {};\na[Symbol.replace] = (...s) => console.log(s);\n'Hello'.replace(a , 'World') // [\"Hello\", \"World\"]\n")])])]),t("p",[a._v("6.Symbol.hasInstance\n当该对象被String.prototype.search方法调用时，会返回该方法的返回值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor(val) {\n        this.val = val;\n    }\n    [Symbol.search](s){\n        return s.indexOf(this.val);\n    }\n}\n'hileo'.search(new P('leo')); // 2\n")])])]),t("p",[a._v("7.Symbol.split\n当该对象被String.prototype.split方法调用时，会返回该方法的返回值。\n// 重新定义了字符串对象的split方法的行为")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor(val) {\n        this.val = val;\n    }\n    [Symbol.split](s) {\n        let i = s.indexOf(this.val);\n        if(i == -1) return s;\n        return [\n            s.substr(0, i),\n            s.substr(i + this.val.length)\n        ]\n    }\n}\n\n'helloworld'.split(new P('hello')); // [\"hello\", \"\"]\n'helloworld'.split(new P('world')); // [\"\", \"world\"] \n'helloworld'.split(new P('leo'));   // \"helloworld\"\n")])])]),t("p",[a._v("8.Symbol.iterator\n对象进行for...of循环时，会调用Symbol.iterator方法，返回该对象的默认遍历器。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    *[Symbol.interator]() {\n        let i = 0;\n        while(this[i] !== undefined ) {\n            yield this[i];\n            ++i;\n        }\n    }\n}\nlet a = new P();\na[0] = 1;\na[1] = 2;\n\nfor (let k of a){\n    console.log(k);\n}\n")])])]),t("p",[a._v("9.Symbol.toPrimitive\n该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。调用时，需要接收一个字符串参数，表示当前运算模式，运算模式有：")]),a._v(" "),t("p",[a._v("Number : 此时需要转换成数值")]),a._v(" "),t("p",[a._v("String : 此时需要转换成字符串")]),a._v(" "),t("p",[a._v("Default : 此时可以转换成数值或字符串")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let obj = {\n  [Symbol.toPrimitive](hint) {\n    switch (hint) {\n      case 'number':\n        return 123;\n      case 'string':\n        return 'str';\n      case 'default':\n        return 'default';\n      default:\n        throw new Error();\n     }\n   }\n};\n\n2 * obj // 246\n3 + obj // '3default'\nobj == 'default' // true\nString(obj) // 'str'\n")])])]),t("p",[a._v("10.Symbol.toStringTag\n在该对象上面调用Object.prototype.toString方法时，如果这个属性存在，它的返回值会出现在toString方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制[object Object]或[object Array]中object后面的那个字符串。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 例一\n({[Symbol.toStringTag]: 'Foo'}.toString())\n// \"[object Foo]\"\n\n// 例二\nclass Collection {\n  get [Symbol.toStringTag]() {\n    return 'xxx';\n  }\n}\nlet x = new Collection();\nObject.prototype.toString.call(x) // \"[object xxx]\"\n")])])]),t("p",[a._v("11.Symbol.unscopables\n该对象指定了使用with关键字时，哪些属性会被with环境排除。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 没有 unscopables 时\nclass MyClass {\n  foo() { return 1; }\n}\n\nvar foo = function () { return 2; };\n\nwith (MyClass.prototype) {\n  foo(); // 1\n}\n\n// 有 unscopables 时\nclass MyClass {\n  foo() { return 1; }\n  get [Symbol.unscopables]() {\n    return { foo: true };\n  }\n}\n\nvar foo = function () { return 2; };\n\nwith (MyClass.prototype) {\n  foo(); // 2\n}\n")])])]),t("p",[a._v("上面代码通过指定Symbol.unscopables属性，使得with语法块不会在当前作用域寻找foo属性，即foo将指向外层作用域的变量。")]),a._v(" "),t("h2",{attrs:{id:"_1-10-set和map数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-set和map数据结构"}},[a._v("#")]),a._v(" 1.10 Set和Map数据结构")]),a._v(" "),t("h3",{attrs:{id:"_1-10-1-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-1-set"}},[a._v("#")]),a._v(" 1.10.1 Set")]),a._v(" "),t("p",[a._v("介绍:\nSet数据结构类似数组，但所有成员的值唯一。\nSet本身为一个构造函数，用来生成Set数据结构，使用add方法来添加新成员。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set();\n[1,2,2,1,3,4,5,4,5].forEach(x=>a.add(x));\nfor(let k of a){\n    console.log(k)\n};\n// 1 2 3 4 5\n")])])]),t("p",[a._v("基础使用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set([1,2,3,3,4]);\n[...a]; // [1,2,3,4]\na.size; // 4\n\n// 数组去重\n[...new Set([1,2,3,4,4,4])];// [1,2,3,4]\n")])])]),t("p",[a._v("::: tip 注意：\n向Set中添加值的时候，不会类型转换，即5和'5'是不同的。\n:::\n[...new Set([5,'5'])]; // [5, \"5\"]")]),a._v(" "),t("p",[a._v("属性和方法：")]),a._v(" "),t("p",[a._v("属性：")]),a._v(" "),t("p",[a._v("Set.prototype.constructor：构造函数，默认就是Set函数。")]),a._v(" "),t("p",[a._v("Set.prototype.size：返回Set实例的成员总数。")]),a._v(" "),t("p",[a._v("操作方法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("add(value)：添加某个值，返回 Set 结构本身。\ndelete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\nhas(value)：返回一个布尔值，表示该值是否为Set的成员。\nclear()：清除所有成员，没有返回值。\nlet a = new Set();\na.add(1).add(2); // a => Set(2) {1, 2}\na.has(2);        // true\na.has(3);        // false\na.delete(2);     // true  a => Set(1) {1}\na.clear();       // a => Set(0) {}\n")])])]),t("p",[a._v("数组去重：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set([1,2,3,3,3,3]);\n")])])]),t("h3",{attrs:{id:"_1-10-2-set的应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-2-set的应用"}},[a._v("#")]),a._v(" 1.10.2 Set的应用")]),a._v(" "),t("p",[a._v("数组去重：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 方法1\n[...new Set([1,2,3,4,4,4])]; // [1,2,3,4]\n// 方法2\nArray.from(new Set([1,2,3,4,4,4]));    // [1,2,3,4]\n")])])]),t("p",[a._v("遍历和过滤：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set([1,2,3,4]);\n\n// map 遍历操作\nlet b = new Set([...a].map(x =>x*2));// b => Set(4) {2,4,6,8}\n\n// filter 过滤操作\nlet c = new Set([...a].filter(x =>(x%2) == 0)); // b => Set(2) {2,4}\n")])])]),t("p",[a._v("获取并集、交集和差集：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set([1,2,3]);\nlet b = new Set([4,3,2]);\n\n// 并集\nlet c1 = new Set([...a, ...b]);  // Set {1,2,3,4}\n\n// 交集\nlet c2 = new Set([...a].filter(x => b.has(x))); // set {2,3}\n\n// 差集\nlet c3 = new Set([...a].filter(x => !b.has(x))); // set {1}\n")])])]),t("p",[a._v("遍历方法：")]),a._v(" "),t("p",[a._v("keys()：返回键名的遍历器。")]),a._v(" "),t("p",[a._v("values()：返回键值的遍历器。")]),a._v(" "),t("p",[a._v("entries()：返回键值对的遍历器。")]),a._v(" "),t("p",[a._v("forEach()：使用回调函数遍历每个成员。")]),a._v(" "),t("p",[a._v("Set遍历顺序是插入顺序，当保存多个回调函数，只需按照顺序调用。但由于Set结构没有键名只有键值，所以keys()和values()是返回结果相同。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set(['a','b','c']);\nfor(let i of a.keys()){console.log(i)};   // 'a' 'b' 'c'\nfor(let i of a.values()){console.log(i)}; // 'a' 'b' 'c'\nfor(let i of a.entries()){console.log(i)}; \n// ['a','a'] ['b','b'] ['c','c']\n")])])]),t("p",[a._v("并且 还可以使用for...of直接遍历Set。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set(['a','b','c']);\nfor(let k of a){console.log(k)};   // 'a' 'b' 'c'\n")])])]),t("p",[a._v("forEach与数组相同，对每个成员执行操作，且无返回值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set(['a','b','c']);\na.forEach((v,k) => console.log(k + ' : ' + v));\n")])])]),t("h3",{attrs:{id:"_1-10-3-map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-3-map"}},[a._v("#")]),a._v(" 1.10.3 Map")]),a._v(" "),t("p",[a._v("由于传统的JavaScript对象只能用字符串当做键，给开发带来很大限制，ES6增加Map数据结构，使得各种类型的值(包括对象)都可以作为键。")]),a._v(" "),t("p",[a._v("Map结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。 基础使用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map();\nlet b = {name: 'leo' };\na.set(b,'my name'); // 添加值\na.get(b);           // 获取值\na.size;      // 获取总数\na.has(b);    // 查询是否存在\na.delete(b); // 删除一个值\na.clear();   // 清空所有成员 无返回\n")])])]),t("p",[a._v("::: tip 注意：\n传入数组作为参数，指定键值对的数组。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map([\n    ['name','leo'],\n    ['age',18]\n])\n")])])]),t("p",[a._v("如果对同一个键多次赋值，后面的值将覆盖前面的值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map();\na.set(1,'aaa').set(1,'bbb');\na.get(1); // 'bbb'\n")])])]),t("p",[a._v("如果读取一个未知的键，则返回undefined。")]),a._v(" "),t("p",[a._v("new Map().get('abcdef'); // undefined")]),a._v(" "),t("p",[a._v("同样的值的两个实例，在 Map 结构中被视为两个键。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map();\nlet a1 = ['aaa'];\nlet a2 = ['aaa'];\na.set(a1,111).set(a2,222);\na.get(a1); // 111\na.get(a2); // 222\n")])])]),t("p",[a._v("遍历方法： Map 的遍历顺序就是插入顺序。")]),a._v(" "),t("p",[a._v("keys()：返回键名的遍历器。")]),a._v(" "),t("p",[a._v("values()：返回键值的遍历器。")]),a._v(" "),t("p",[a._v("entries()：返回所有成员的遍历器。")]),a._v(" "),t("p",[a._v("forEach()：遍历 Map 的所有成员。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map([\n    ['name','leo'],\n    ['age',18]\n])\n\nfor (let i of a.keys()){...};\nfor (let i of a.values()){...};\nfor (let i of a.entries()){...};\na.forEach((v,k,m)=>{\n    console.log(`key:${k},value:${v},map:${m}`)\n})\n")])])]),t("p",[a._v("将Map结构转成数组结构：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map([\n    ['name','leo'],\n    ['age',18]\n])\n\nlet a1 = [...a.keys()];   // a1 => [\"name\", \"age\"]\nlet a2 = [...a.values()]; // a2 =>  [\"leo\", 18]\nlet a3 = [...a.entries()];// a3 => [['name','leo'], ['age',18]]\n")])])]),t("h3",{attrs:{id:"_1-10-4-map与其他数据结构互相转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-4-map与其他数据结构互相转换"}},[a._v("#")]),a._v(" 1.10.4 Map与其他数据结构互相转换")]),a._v(" "),t("p",[a._v("Map 转 数组")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Map().set(true,1).set({f:2},['abc']);\n[...a]; // [[true:1], [ {f:2},['abc'] ]]\n")])])]),t("p",[a._v("数组 转 Map")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = [ ['name','leo'], [1, 'hi' ]]\nlet b = new Map(a);\n")])])]),t("p",[a._v("Map 转 对象 如果所有 Map 的键都是字符串，它可以无损地转为对象。\n如果有非字符串的键名，那么这个键名会被转成字符串，再作为对象的键名。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun(s) {\n  let obj = Object.create(null);\n  for (let [k,v] of s) {\n    obj[k] = v;\n  }\n  return obj;\n}\n\nconst a = new Map().set('yes', true).set('no', false);\nfun(a)\n// { yes: true, no: false }\n")])])]),t("p",[a._v("对象 转 Map")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('function fun(obj) {\n  let a = new Map();\n  for (let k of Object.keys(obj)) {\n    a.set(k, obj[k]);\n  }\n  return a;\n}\n\nfun({yes: true, no: false})\n// Map {"yes" => true, "no" => false}\n')])])]),t("p",[a._v("Map 转 JSON")]),a._v(" "),t("p",[a._v("(1)Map键名都是字符串，转为对象JSON：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun (s) {\n    let obj = Object.create(null);\n    for (let [k,v] of s) {\n        obj[k] = v;\n    }\n    return JSON.stringify(obj)\n}\nlet a = new Map().set('yes', true).set('no', false);\nfun(a);\n// '{\"yes\":true,\"no\":false}'\n")])])]),t("p",[a._v("(2)Map键名有非字符串，转为数组JSON：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun (map) {\n  return JSON.stringify([...map]);\n}\n\nlet a = new Map().set(true, 7).set({foo: 3}, ['abc']);\nfun(a)\n// '[[true,7],[{\"foo\":3},[\"abc\"]]]'\n")])])]),t("p",[a._v("JSON 转 Map")]),a._v(" "),t("p",[a._v("(1)所有键名都是字符串：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun (s) {\n  let strMap = new Map();\n  for (let k of Object.keys(s)) {\n    strMap.set(k, s[k]);\n  }\n  return strMap;\n  return JSON.parse(strMap);\n}\nfun('{\"yes\": true, \"no\": false}')\n// Map {'yes' => true, 'no' => false}\n")])])]),t("p",[a._v("(2)整个 JSON 就是一个数组，且每个数组成员本身，又是一个有两个成员的数组:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun2(s) {\n  return new Map(JSON.parse(s));\n}\nfun2('[[true,7],[{\"foo\":3},[\"abc\"]]]')\n// Map {true => 7, Object {foo: 3} => ['abc']}\n")])])]),t("h2",{attrs:{id:"_1-11-proxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-proxy"}},[a._v("#")]),a._v(" 1.11 Proxy")]),a._v(" "),t("p",[a._v("proxy 用于修改某些操作的默认行为，可以理解为一种拦截外界对目标对象访问的一种机制，从而对外界的访问进行过滤和修改，即代理某些操作，也称“代理器”。")]),a._v(" "),t("h3",{attrs:{id:"_1-11-1-基础使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-1-基础使用"}},[a._v("#")]),a._v(" 1.11.1 基础使用")]),a._v(" "),t("p",[a._v("proxy实例化需要传入两个参数，target参数表示所要拦截的目标对象，handler参数也是一个对象，用来定制拦截行为。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let p = new Proxy(target, handler);\n\nlet a = new Proxy({}, {\n    get: function (target, handler){\n        return 'leo';\n    }\n})\na.name; // leo\na.age;  // leo\na.abcd; // leo\n")])])]),t("p",[a._v("上述a实例中，在第二个参数中定义了get方法，来拦截外界访问，并且get方法接收两个参数，分别是目标对象和所要访问的属性，所以不管外部访问对象中任何属性都会执行get方法返回leo。")]),a._v(" "),t("p",[a._v("::: tip 注意：\n只能使用Proxy实例的对象才能使用这些操作。")]),a._v(" "),t("p",[a._v("如果handler没有设置拦截，则直接返回原对象。\n:::")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let target = {};\nlet handler = {};\nlet p = new Proxy(target, handler);\np.a = 'leo'; \ntarget.a;  // 'leo'\n")])])]),t("p",[a._v("同个拦截器函数，设置多个拦截操作：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let p = new Proxy(function(a, b){\n    return a + b;\n},{\n    get:function(){\n        return 'get方法';\n    },\n    apply:function(){\n        return 'apply方法';\n    }\n})\n")])])]),t("p",[a._v("Proxy支持的13种拦截操作：")]),a._v(" "),t("p",[a._v("13种拦截操作的详细介绍：打开阮一峰老师的链接。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("get(target, propKey, receiver)： 拦截对象属性的读取，比如proxy.foo和proxy['foo']。\n\nset(target, propKey, value, receiver)： 拦截对象属性的设置，比如proxy.foo = v或proxy['foo'] = v，返回一个布尔值。\n\nhas(target, propKey)： 拦截propKey in proxy的操作，返回一个布尔值。\n\ndeleteProperty(target, propKey)： 拦截delete proxy[propKey]的操作，返回一个布尔值。\n\nownKeys(target)： 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。\n\ngetOwnPropertyDescriptor(target, propKey)： 拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。\n\ndefineProperty(target, propKey, propDesc)： 拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。\n\npreventExtensions(target)： 拦截Object.preventExtensions(proxy)，返回一个布尔值。\n\ngetPrototypeOf(target)： 拦截Object.getPrototypeOf(proxy)，返回一个对象。\n\nisExtensible(target)： 拦截Object.isExtensible(proxy)，返回一个布尔值。\n\nsetPrototypeOf(target, proto)： 拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。\n\napply(target, object, args)： 拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。\n\nconstruct(target, args)： 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。\n")])])]),t("h3",{attrs:{id:"_1-11-2-取消proxy实例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-2-取消proxy实例"}},[a._v("#")]),a._v(" 1.11.2 取消Proxy实例")]),a._v(" "),t("p",[a._v("使用Proxy.revocale方法取消Proxy实例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {};\nlet b = {};\nlet {proxy, revoke} = Proxy.revocale(a, b);\n\nproxy.name = 'leo';  // 'leo'\nrevoeke();\nproxy.name;  // TypeError: Revoked\n")])])]),t("h3",{attrs:{id:"_1-11-3-实现-web服务的客户端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-3-实现-web服务的客户端"}},[a._v("#")]),a._v(" 1.11.3 实现 Web服务的客户端")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const service = createWebService('http://le.com/data');\nservice.employees().than(json =>{\n    const employees = JSON.parse(json);\n})\n\nfunction createWebService(url){\n    return new Proxy({}, {\n        get(target, propKey, receiver{\n            return () => httpGet(url+'/'+propKey);\n        })\n    })\n}\n")])])]),t("h2",{attrs:{id:"_1-12-promise对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-promise对象"}},[a._v("#")]),a._v(" 1.12 Promise对象")]),a._v(" "),t("h3",{attrs:{id:"_1-12-1-概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-1-概念"}},[a._v("#")]),a._v(" 1.12.1 概念")]),a._v(" "),t("p",[a._v("主要用途：解决异步编程带来的回调地狱问题。\n把Promise简单理解一个容器，存放着某个未来才会结束的事件（通常是一个异步操作）的结果。通过Promise对象来获取异步操作消息，处理各种异步操作。")]),a._v(" "),t("p",[a._v("Promise对象2特点：")]),a._v(" "),t("p",[a._v("对象的状态不受外界影响。")]),a._v(" "),t("p",[a._v("Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。")]),a._v(" "),t("p",[a._v("一旦状态改变，就不会再变，任何时候都可以得到这个结果。")]),a._v(" "),t("p",[a._v("Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。")]),a._v(" "),t("p",[a._v("注意，为了行文方便，本章后面的resolved统一只指fulfilled状态，不包含rejected状态。")]),a._v(" "),t("p",[a._v("Promise缺点")]),a._v(" "),t("p",[a._v("无法取消Promise，一旦新建它就会立即执行，无法中途取消。")]),a._v(" "),t("p",[a._v("如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。")]),a._v(" "),t("p",[a._v("当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。")]),a._v(" "),t("h3",{attrs:{id:"_1-12-2-基本使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-2-基本使用"}},[a._v("#")]),a._v(" 1.12.2 基本使用")]),a._v(" "),t("p",[a._v("Promise为一个构造函数，需要用new来实例化。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let p = new Promise(function (resolve, reject){\n   if(/*异步操作成功*/){\n       resolve(value);\n   } else {\n       reject(error);\n   }\n})\n")])])]),t("p",[a._v("Promise接收一个函数作为参数，该函数两个参数resolve和reject，有JS引擎提供。")]),a._v(" "),t("p",[a._v("resolve作用是将Promise的状态从pending变成resolved，在异步操作成功时调用，返回异步操作的结果，作为参数传递出去。\nreject作用是将Promise的状态从pending变成rejected，在异步操作失败时报错，作为参数传递出去。\nPromise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("p.then(function(val){\n    // success...\n},function(err){\n    // error...\n})\n")])])]),t("p",[a._v("几个例子来理解 ：")]),a._v(" "),t("p",[a._v("当一段时间过后，Promise状态便成为resolved触发then方法绑定的回调函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function timeout (s){\n    return new Promise((resolve, reject){\n        setTimeout(result,ms, 'done');\n    })\n}\ntimeout(100).then(val => {\n    console.log(val);\n})\n")])])]),t("p",[a._v("Promise新建后立刻执行。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let p = new Promise(function(resolve, reject){\n    console.log(1);\n    resolve();\n})\np.then(()=>{\n    console.log(2);\n})\nconsole.log(3);\n// 1\n// 3\n// 2 \n")])])]),t("p",[a._v("异步加载图片：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f(url){\n    return new Promise(function(resolve, reject){\n        const img = new Image ();\n        img.onload = function(){\n            resolve(img);\n        }\n        img.onerror = function(){\n            reject(new Error(\n                'Could not load image at ' + url\n            ));\n        }\n        img.src = url;\n    })\n}\n")])])]),t("p",[a._v("resolve函数和reject函数的参数为resolve函数或reject函数：\np1的状态决定了p2的状态，所以p2要等待p1的结果再执行回调函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p1 = new Promise(function (resolve, reject) {\n  setTimeout(() => reject(new Error('fail')), 3000)\n})\n\nconst p2 = new Promise(function (resolve, reject) {\n  setTimeout(() => resolve(p1), 1000)\n})\n\np2\n  .then(result => console.log(result))\n  .catch(error => console.log(error))\n// Error: fail\n")])])]),t("p",[a._v("调用resolve或reject不会结束Promise参数函数的执行，除了return:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("new Promise((resolve, reject){\n    resolve(1);\n    console.log(2);\n}).then(r => {\n    console.log(3);\n})\n// 2\n// 1\n\nnew Promise((resolve, reject){\n    return resolve(1);\n    console.log(2);\n})\n// 1\n")])])]),t("h3",{attrs:{id:"_1-12-3-promise-prototype-then"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-3-promise-prototype-then"}},[a._v("#")]),a._v(" 1.12.3 Promise.prototype.then()")]),a._v(" "),t("p",[a._v("作用是为Promise添加状态改变时的回调函数，then方法的第一个参数是resolved状态的回调函数，第二个参数（可选）是rejected状态的回调函数。")]),a._v(" "),t("p",[a._v("then方法返回一个新Promise实例，与原来Promise实例不同，因此可以使用链式写法，上一个then的结果作为下一个then的参数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('getJSON("/posts.json").then(function(json) {\n  return json.post;\n}).then(function(post) {\n  // ...\n});\n')])])]),t("h3",{attrs:{id:"_1-12-4-promise-prototype-catch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-4-promise-prototype-catch"}},[a._v("#")]),a._v(" 1.12.4 Promise.prototype.catch()")]),a._v(" "),t("p",[a._v("Promise.prototype.catch方法是.then(null, rejection)的别名，用于指定发生错误时的回调函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("getJSON('/posts.json').then(function(posts) {\n  // ...\n}).catch(function(error) {\n  // 处理 getJSON 和 前一个回调函数运行时发生的错误\n  console.log('发生错误！', error);\n});\n")])])]),t("p",[a._v("如果 Promise 状态已经变成resolved，再抛出错误是无效的。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p = new Promise(function(resolve, reject) {\n  resolve('ok');\n  throw new Error('test');\n});\np\n  .then(function(value) { console.log(value) })\n  .catch(function(error) { console.log(error) });\n// ok\n")])])]),t("p",[a._v("当promise抛出一个错误，就被catch方法指定的回调函数捕获，下面三种写法相同。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 写法一\nconst p = new Promise(function(resolve, reject) {\n  throw new Error('test');\n});\np.catch(function(error) {\n  console.log(error);\n});\n// Error: test\n\n// 写法二\nconst p = new Promise(function(resolve, reject) {\n  try {\n    throw new Error('test');\n  } catch(e) {\n    reject(e);\n  }\n});\np.catch(function(error) {\n  console.log(error);\n});\n\n// 写法三\nconst p = new Promise(function(resolve, reject) {\n  reject(new Error('test'));\n});\np.catch(function(error) {\n  console.log(error);\n});\n")])])]),t("p",[a._v("一般来说，不要在then方法里面定义Reject 状态的回调函数（即then的第二个参数），总是使用catch方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// bad\npromise\n  .then(function(data) {\n    // success\n  }, function(err) {\n    // error\n  });\n\n// good\npromise\n  .then(function(data) { //cb\n    // success\n  })\n  .catch(function(err) {\n    // error\n  });\n")])])]),t("h3",{attrs:{id:"_1-12-5-promise-prototype-finally"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-5-promise-prototype-finally"}},[a._v("#")]),a._v(" 1.12.5 Promise.prototype.finally()")]),a._v(" "),t("p",[a._v("finally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("promise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n")])])]),t("p",[a._v("finally不接收任何参数，与状态无关，本质上是then方法的特例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("promise\n.finally(() => {\n  // 语句\n});\n\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n")])])]),t("p",[a._v("上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\nfinally方法总是会返回原来的值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// resolve 的值是 undefined\nPromise.resolve(2).then(() => {}, () => {})\n\n// resolve 的值是 2\nPromise.resolve(2).finally(() => {})\n\n// reject 的值是 undefined\nPromise.reject(3).then(() => {}, () => {})\n\n// reject 的值是 3\nPromise.reject(3).finally(() => {})\n")])])]),t("h3",{attrs:{id:"_1-12-6-promise-all"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-6-promise-all"}},[a._v("#")]),a._v(" 1.12.6 Promise.all()")]),a._v(" "),t("p",[a._v("用于将多个 Promise 实例，包装成一个新的 Promise 实例，参数可以不是数组，但必须是Iterator接口，且返回的每个成员都是Promise实例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p = Promise.all([p1, p2, p3]);\n")])])]),t("p",[a._v("p的状态由p1、p2、p3决定，分成两种情况。")]),a._v(" "),t("p",[a._v("只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。")]),a._v(" "),t("p",[a._v("只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 生成一个Promise对象的数组\nconst promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON('/post/' + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n")])])]),t("p",[a._v("上面代码中，promises是包含 6 个 Promise 实例的数组，只有这 6 个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。")]),a._v(" "),t("p",[a._v("注意：如果Promise的参数中定义了catch方法，则rejected后不会触发Promise.all()的catch方法，因为参数中的catch方法执行完后也会变成resolved，当Promise.all()方法参数的实例都是resolved时就会调用Promise.all()的then方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result)\n.catch(e => e);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result)\n.catch(e => e);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// [\"hello\", Error: 报错了]\n")])])]),t("p",[a._v("如果参数里面都没有catch方法，就会调用Promise.all()的catch方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p1 = new Promise((resolve, reject) => {\n  resolve('hello');\n})\n.then(result => result);\n\nconst p2 = new Promise((resolve, reject) => {\n  throw new Error('报错了');\n})\n.then(result => result);\n\nPromise.all([p1, p2])\n.then(result => console.log(result))\n.catch(e => console.log(e));\n// Error: 报错了\n")])])]),t("h3",{attrs:{id:"_1-12-7-promise-race"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-7-promise-race"}},[a._v("#")]),a._v(" 1.12.7 Promise.race()")]),a._v(" "),t("p",[a._v("与Promise.all方法类似，也是将多个Promise实例包装成一个新的Promise实例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p = Promise.race([p1, p2, p3]);\n")])])]),t("p",[a._v("与Promise.all方法区别在于，Promise.race方法是p1, p2, p3中只要一个参数先改变状态，就会把这个参数的返回值传给p的回调函数。")]),a._v(" "),t("h3",{attrs:{id:"_1-12-8-promise-resolve"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-8-promise-resolve"}},[a._v("#")]),a._v(" 1.12.8 Promise.resolve()")]),a._v(" "),t("p",[a._v("将现有对象转换成 Promise 对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p = Promise.resolve($.ajax('/whatever.json'));\n")])])]),t("h3",{attrs:{id:"_1-12-9-promise-reject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-9-promise-reject"}},[a._v("#")]),a._v(" 1.12.9 Promise.reject()")]),a._v(" "),t("p",[a._v("返回一个rejected状态的Promise实例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const p = Promise.reject('出错了');\n// 等同于\nconst p = new Promise((resolve, reject) => reject('出错了'))\n\np.then(null, function (s) {\n  console.log(s)\n});\n// 出错了\n")])])]),t("p",[a._v("注意，Promise.reject()方法的参数，会原封不动地作为reject的理由，变成后续方法的参数。这一点与Promise.resolve方法不一致。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const thenable = {\n  then(resolve, reject) {\n    reject('出错了');\n  }\n};\n\nPromise.reject(thenable)\n.catch(e => {\n  console.log(e === thenable)\n})\n// true\n")])])]),t("h2",{attrs:{id:"_1-13-iterator和-for-of循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-iterator和-for-of循环"}},[a._v("#")]),a._v(" 1.13 Iterator和 for...of循环")]),a._v(" "),t("h3",{attrs:{id:"_1-13-1-iterator遍历器概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-1-iterator遍历器概念"}},[a._v("#")]),a._v(" 1.13.1 Iterator遍历器概念")]),a._v(" "),t("p",[a._v("Iterator是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。")]),a._v(" "),t("p",[a._v("Iterator三个作用：")]),a._v(" "),t("p",[a._v("为各种数据结构，提供一个统一的、简便的访问接口；")]),a._v(" "),t("p",[a._v("使得数据结构的成员能够按某种次序排列；")]),a._v(" "),t("p",[a._v("Iterator 接口主要供ES6新增的for...of消费；")]),a._v(" "),t("h3",{attrs:{id:"_1-13-2-iterator遍历过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-2-iterator遍历过程"}},[a._v("#")]),a._v(" 1.13.2 Iterator遍历过程")]),a._v(" "),t("p",[a._v("创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。")]),a._v(" "),t("p",[a._v("第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。")]),a._v(" "),t("p",[a._v("第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。")]),a._v(" "),t("p",[a._v("不断调用指针对象的next方法，直到它指向数据结构的结束位置。")]),a._v(" "),t("p",[a._v("每一次调用next方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含value和done两个属性的对象。")]),a._v(" "),t("p",[a._v("value属性是当前成员的值;")]),a._v(" "),t("p",[a._v("done属性是一个布尔值，表示遍历是否结束;")]),a._v(" "),t("p",[a._v("模拟next方法返回值：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let f = function (arr){\n    var nextIndex = 0;\n    return {\n        next:function(){\n            return nextIndex < arr.length ?\n            {value: arr[nextIndex++], done: false}:\n            {value: undefined, done: true}\n        }\n    }\n}\n\nlet a = f(['a', 'b']);\na.next(); // { value: \"a\", done: false }\na.next(); // { value: \"b\", done: false }\na.next(); // { value: undefined, done: true }\n")])])]),t("h3",{attrs:{id:"_1-13-3-默认iterator接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-3-默认iterator接口"}},[a._v("#")]),a._v(" 1.13.3 默认Iterator接口")]),a._v(" "),t("p",[a._v("若数据可遍历，即一种数据部署了Iterator接口。")]),a._v(" "),t("p",[a._v("ES6中默认的Iterator接口部署在数据结构的Symbol.iterator属性，即如果一个数据结构具有Symbol.iterator属性，就可以认为是可遍历。")]),a._v(" "),t("p",[a._v("Symbol.iterator属性本身是函数，是当前数据结构默认的遍历器生成函数。执行这个函数，就会返回一个遍历器。至于属性名Symbol.iterator，它是一个表达式，返回Symbol对象的iterator属性，这是一个预定义好的、类型为 Symbol 的特殊值，所以要放在方括号内（参见《Symbol》一章）。")]),a._v(" "),t("p",[a._v("原生具有Iterator接口的数据结构有：")]),a._v(" "),t("p",[a._v("Array")]),a._v(" "),t("p",[a._v("Map")]),a._v(" "),t("p",[a._v("Set")]),a._v(" "),t("p",[a._v("String")]),a._v(" "),t("p",[a._v("TypedArray")]),a._v(" "),t("p",[a._v("函数的 arguments 对象")]),a._v(" "),t("p",[a._v("NodeList 对象")]),a._v(" "),t("h3",{attrs:{id:"_1-13-4-iterator使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-4-iterator使用场景"}},[a._v("#")]),a._v(" 1.13.4 Iterator使用场景")]),a._v(" "),t("p",[a._v("(1)解构赋值")]),a._v(" "),t("p",[a._v("对数组和 Set 结构进行解构赋值时，会默认调用Symbol.iterator方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set().add('a').add('b').add('c');\nlet [x, y] = a;       // x = 'a'  y = 'b'\nlet [a1, ...a2] = a;  // a1 = 'a' a2 = ['b','c']\n")])])]),t("p",[a._v("(2)扩展运算符")]),a._v(" "),t("p",[a._v("扩展运算符（...）也会调用默认的 Iterator 接口。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 'hello';\n[...a];            //  ['h','e','l','l','o']\n\nlet a = ['b', 'c'];\n['a', ...a, 'd'];  // ['a', 'b', 'c', 'd']\n")])])]),t("p",[a._v("(2)yield*")]),a._v(" "),t("p",[a._v("yield*后面跟的是一个可遍历的结构，它会调用该结构的遍历器接口。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = function*(){\n    yield 1;\n    yield* [2,3,4];\n    yield 5;\n}\n\nlet b = a();\nb.next() // { value: 1, done: false }\nb.next() // { value: 2, done: false }\nb.next() // { value: 3, done: false }\nb.next() // { value: 4, done: false }\nb.next() // { value: 5, done: false }\nb.next() // { value: undefined, done: true }\n")])])]),t("p",[a._v("(4)其他场合")]),a._v(" "),t("p",[a._v("由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口。下面是一些例子。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for...of\n\nArray.from()\n\nMap(), Set(), WeakMap(), WeakSet()（比如new Map([['a',1],['b',2]])）\n\nPromise.all()\n\nPromise.race()\n")])])]),t("h3",{attrs:{id:"_1-13-5-for-of循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-5-for-of循环"}},[a._v("#")]),a._v(" 1.13.5 for...of循环")]),a._v(" "),t("p",[a._v("只要数据结构部署了Symbol.iterator属性，即具有 iterator 接口，可以用for...of循环遍历它的成员。也就是说，for...of循环内部调用的是数据结构的Symbol.iterato方法。")]),a._v(" "),t("p",[a._v("使用场景：")]),a._v(" "),t("p",[a._v("for...of可以使用在数组，Set和Map结构，类数组对象，Genetator对象和字符串。")]),a._v(" "),t("p",[a._v("数组")]),a._v(" "),t("p",[a._v("for...of循环可以代替数组实例的forEach方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = ['a', 'b', 'c'];\nfor (let k of a){console.log(k)}; // a b c\n\na.forEach((ele, index)=>{\n    console.log(ele);    // a b c\n    console.log(index);  // 0 1 2 \n})\n")])])]),t("p",[a._v("与for...in对比，for...in只能获取对象键名，不能直接获取键值，而for...of允许直接获取键值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = ['a', 'b', 'c'];\nfor (let k of a){console.log(k)};  // a b c\nfor (let k in a){console.log(k)};  // 0 1 2\n")])])]),t("p",[a._v("Set和Map")]),a._v(" "),t("p",[a._v("可以使用数组作为变量，如for (let [k,v] of b){...}。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = new Set(['a', 'b', 'c']);\nfor (let k of a){console.log(k)}; // a b c\n\nlet b = new Map();\nb.set('name','leo');\nb.set('age', 18);\nb.set('aaa','bbb');\nfor (let [k,v] of b){console.log(k + \":\" + v)};\n// name:leo\n// age:18\n// aaa:bbb\n")])])]),t("p",[a._v("类数组对象")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 字符串\nlet a = 'hello';\nfor (let k of a ){console.log(k)}; // h e l l o\n\n// DOM NodeList对象\nlet b = document.querySelectorAll('p');\nfor (let k of b ){\n    k.classList.add('test');\n}\n\n// arguments对象\nfunction f(){\n    for (let k of arguments){\n        console.log(k);\n    }\n}\nf('a','b'); // a b\n")])])]),t("p",[a._v("对象")]),a._v(" "),t("p",[a._v("普通对象不能直接使用for...of会报错，要部署Iterator才能使用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {a:'aa',b:'bb',c:'cc'};\nfor (let k in a){console.log(k)}; // a b c\nfor (let k of a){console>log(k)}; // TypeError\n")])])]),t("h3",{attrs:{id:"_1-13-6-跳出for-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-6-跳出for-of"}},[a._v("#")]),a._v(" 1.13.6 跳出for...of")]),a._v(" "),t("p",[a._v("使用break来实现。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("for (let k of a){\n    if(k>100)\n        break;\n    console.log(k);\n}\n")])])]),t("h2",{attrs:{id:"_1-14-generator函数和应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-generator函数和应用"}},[a._v("#")]),a._v(" 1.14 Generator函数和应用")]),a._v(" "),t("h3",{attrs:{id:"_1-14-1-基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-1-基本概念"}},[a._v("#")]),a._v(" 1.14.1 基本概念")]),a._v(" "),t("p",[a._v("Generator函数是一种异步编程解决方案。")]),a._v(" "),t("p",[a._v("原理：")]),a._v(" "),t("p",[a._v("执行Genenrator函数会返回一个遍历器对象，依次遍历Generator函数内部的每一个状态。")]),a._v(" "),t("p",[a._v("Generator函数是一个普通函数，有以下两个特征：")]),a._v(" "),t("p",[a._v("function关键字与函数名之间有个星号；")]),a._v(" "),t("p",[a._v("函数体内使用yield表达式，定义不同状态；")]),a._v(" "),t("p",[a._v("通过调用next方法，将指针移向下一个状态，直到遇到下一个yield表达式（或return语句）为止。简单理解，Generator函数分段执行，yield表达式是暂停执行的标记，而next恢复执行。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * f (){\n    yield 'hi';\n    yield 'leo';\n    return 'ending';\n}\nlet a = f();\na.next();  // {value: 'hi', done : false}\na.next();  // {value: 'leo', done : false}\na.next();  // {value: 'ending', done : true}\na.next();  // {value: undefined, done : false}\n")])])]),t("h3",{attrs:{id:"_1-14-2-yield表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-2-yield表达式"}},[a._v("#")]),a._v(" 1.14.2 yield表达式")]),a._v(" "),t("p",[a._v("yield表达式是暂停标志，遍历器对象的next方法的运行逻辑如下：")]),a._v(" "),t("p",[a._v("遇到yield就暂停执行，将这个yield后的表达式的值，作为返回对象的value属性值。")]),a._v(" "),t("p",[a._v("下次调用next往下执行，直到遇到下一个yield。")]),a._v(" "),t("p",[a._v("直到函数结束或者return为止，并返回return语句后面表达式的值，作为返回对象的value属性值。")]),a._v(" "),t("p",[a._v("如果该函数没有return语句，则返回对象的value为undefined 。")]),a._v(" "),t("p",[a._v("注意：")]),a._v(" "),t("p",[a._v("yield只能用在Generator函数里使用，其他地方使用会报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 错误1\n(function(){\n    yiled 1;  // SyntaxError: Unexpected number\n})()\n\n// 错误2  forEach参数是个普通函数\nlet a = [1, [[2, 3], 4], [5, 6]];\nlet f = function * (i){\n    i.forEach(function(m){\n        if(typeof m !== 'number'){\n            yield * f (m);\n        }else{\n            yield m;\n        }\n    })\n}\nfor (let k of f(a)){\n    console.log(k)\n}\n")])])]),t("p",[a._v("yield表达式如果用于另一个表达式之中，必须放在圆括号内。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * a (){\n    console.log('a' + yield);     //  SyntaxErro\n    console.log('a' + yield 123); //  SyntaxErro\n    console.log('a' + (yield));     //  ok\n    console.log('a' + (yield 123)); //  ok\n}\n")])])]),t("p",[a._v("yield表达式用做函数参数或放在表达式右边，可以不加括号。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * a (){\n    f(yield 'a', yield 'b');    //  ok\n    lei i = yield;              //  ok\n}\n")])])]),t("h3",{attrs:{id:"_1-14-3-next方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-3-next方法"}},[a._v("#")]),a._v(" 1.14.3 next方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("yield本身没有返回值，或者是总返回undefined，next方法可带一个参数，作为上一个yield表达式的返回值。\n\nfunction * f (){\n    for (let k = 0; true; k++){\n        let a = yield k;\n        if(a){k = -1};\n    }\n}\nlet g =f();\ng.next();    // {value: 0, done: false}\ng.next();    // {value: 1, done: false}\ng.next(true);    // {value: 0, done: false}\n")])])]),t("p",[a._v("这一特点，可以让Generator函数开始执行之后，可以从外部向内部注入不同值，从而调整函数行为。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * f(x){\n    let y = 2 * (yield (x+1));\n    let z = yield (y/3);\n    return (x + y + z);\n}\nlet a = f(5);\na.next();   // {value : 6 ,done : false}\na.next();   // {value : NaN ,done : false}  \na.next();   // {value : NaN ,done : true}\n// NaN因为yeild返回的是对象 和数字计算会NaN\n\nlet b = f(5);\nb.next();     // {value : 6 ,done : false}\nb.next(12);   // {value : 8 ,done : false}\nb.next(13);   // {value : 42 ,done : false}\n// x 5 y 24 z 13\n")])])]),t("h3",{attrs:{id:"_1-14-4-for-of循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-4-for-of循环"}},[a._v("#")]),a._v(" 1.14.4 for...of循环")]),a._v(" "),t("p",[a._v("for...of循环会自动遍历，不用调用next方法，需要注意的是，for...of遇到next返回值的done属性为true就会终止，return返回的不包括在for...of循环中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * f(){\n    yield 1;\n    yield 2;\n    yield 3;\n    yield 4;\n    return 5;\n}\nfor (let k of f()){\n    console.log(k);\n}\n// 1 2 3 4  没有 5 \n")])])]),t("h3",{attrs:{id:"_1-14-5-generator-prototype-throw"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-5-generator-prototype-throw"}},[a._v("#")]),a._v(" 1.14.5 Generator.prototype.throw()")]),a._v(" "),t("p",[a._v("throw方法用来向函数外抛出错误，并且在Generator函数体内捕获。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let f = function * (){\n    try { yield }\n    catch (e) { console.log('内部捕获', e) }\n}\n\nlet a = f();\na.next();\n\ntry{\n    a.throw('a');\n    a.throw('b');\n}catch(e){\n    console.log('外部捕获',e);\n}\n// 内部捕获 a\n// 外部捕获 b\n")])])]),t("h3",{attrs:{id:"_1-14-6-generator-prototype-return"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-6-generator-prototype-return"}},[a._v("#")]),a._v(" 1.14.6 Generator.prototype.return()")]),a._v(" "),t("p",[a._v("return方法用来返回给定的值，并结束遍历Generator函数，如果return方法没有参数，则返回值的value属性为undefined。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * f(){\n    yield 1;\n    yield 2;\n    yield 3;\n}\nlet g = f();\ng.next();          // {value : 1, done : false}\ng.return('leo');   // {value : 'leo', done \" true}\ng.next();          // {value : undefined, done : true}\n")])])]),t("h3",{attrs:{id:"_1-14-7-next-throw-return-共同点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-7-next-throw-return-共同点"}},[a._v("#")]),a._v(" 1.14.7 next()/throw()/return()共同点")]),a._v(" "),t("p",[a._v("相同点就是都是用来恢复Generator函数的执行，并且使用不同语句替换yield表达式。")]),a._v(" "),t("p",[a._v("next()将yield表达式替换成一个值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let f = function * (x,y){\n    let r = yield x + y;\n    return r;\n}\nlet g = f(1, 2); \ng.next();   // {value : 3, done : false}\ng.next(1);  // {value : 1, done : true}\n// 相当于把 let r = yield x + y;\n// 替换成 let r = 1;\n")])])]),t("p",[a._v("throw()将yield表达式替换成一个throw语句。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("g.throw(new Error('报错'));  // Uncaught Error:报错\n// 相当于将 let r = yield x + y\n// 替换成 let r = throw(new Error('报错'));\n")])])]),t("p",[a._v("next()将yield表达式替换成一个return语句。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("g.return(2); // {value: 2, done: true}\n// 相当于将 let r = yield x + y\n// 替换成 let r = return 2;\n")])])]),t("h3",{attrs:{id:"_1-14-8-yield-表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-8-yield-表达式"}},[a._v("#")]),a._v(" 1.14.8 yield* 表达式")]),a._v(" "),t("p",[a._v("用于在一个Generator中执行另一个Generator函数，如果没有使用yield*会没有效果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function * a(){\n    yield 1;\n    yield 2;\n}\nfunction * b(){\n    yield 3;\n    yield * a();\n    yield 4;\n}\n// 等同于\nfunction * b(){\n    yield 3;\n    yield 1;\n    yield 2;\n    yield 4;\n}\nfor(let k of b()){console.log(k)}\n// 3\n// 1\n// 2\n// 4\n")])])]),t("h3",{attrs:{id:"_1-14-9-应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-9-应用场景"}},[a._v("#")]),a._v(" 1.14.9 应用场景")]),a._v(" "),t("p",[a._v("控制流管理")]),a._v(" "),t("p",[a._v("解决回调地狱：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 使用前\nf1(function(v1){\n    f2(function(v2){\n        f3(function(v3){\n            // ... more and more\n        })\n    })\n})\n\n// 使用Promise \nPromise.resolve(f1)\n    .then(f2)\n    .then(f3)\n    .then(function(v4){\n        // ...\n    },function (err){\n        // ...\n    }).done();\n\n// 使用Generator\nfunction * f (v1){\n    try{\n        let v2 = yield f1(v1);\n        let v3 = yield f1(v2);\n        let v4 = yield f1(v3);\n        // ...\n    }catch(err){\n        // console.log(err)\n    }\n}\nfunction g (task){\n    let obj = task.next(task.value);\n  // 如果Generator函数未结束，就继续调用\n  if(!obj.done){\n      task.value = obj.value;\n      g(task);\n  }\n}\ng( f(initValue) );\n")])])]),t("p",[a._v("异步编程的使用 在真实的异步任务封装的情况：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let fetch = require('node-fetch');\nfunction * f(){\n    let url = 'http://www.baidu.com';\n    let res = yield fetch(url);\n    console.log(res.bio);\n}\n// 执行该函数\nlet g = f();\nlet result = g.next();\n// 由于fetch返回的是Promise对象，所以用then\nresult.value.then(function(data){\n    return data.json();\n}).then(function(data){\n    g.next(data);\n})\n")])])]),t("h2",{attrs:{id:"_1-15-class语法和继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-class语法和继承"}},[a._v("#")]),a._v(" 1.15 Class语法和继承")]),a._v(" "),t("h3",{attrs:{id:"_1-15-1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-1-介绍"}},[a._v("#")]),a._v(" 1.15.1 介绍")]),a._v(" "),t("p",[a._v("ES6中的class可以看作只是一个语法糖，绝大部分功能都可以用ES5实现，并且，类和模块的内部，默认就是严格模式，所以不需要使用use strict指定运行模式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// ES5\nfunction P (x,y){\n    this.x = x;\n    this.y = y;\n}\nP.prototype.toString = function () {\n  return '(' + this.x + ', ' + this.y + ')';\n};\nvar a = new P(1, 2);\n\n// ES6\nclass P {\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n}\nlet a = new P(1, 2);\n")])])]),t("p",[a._v("值得注意： ES6的类的所有方法都是定义在prototype属性上，调用类的实例的方法，其实就是调用原型上的方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor(){ ... }\n    toString(){ ... }\n    toNumber(){ ... }\n}\n// 等同于\nP.prototyoe = {\n    constructor(){ ... },\n    toString(){ ... },\n    toNumber(){ ... }\n}\n\nlet a = new P();\na.constructor === P.prototype.constructor; // true\n")])])]),t("p",[a._v("类的属性名可以使用表达式：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let name = 'leo';\nclass P {\n    constructor (){ ... }\n    [name](){ ... }\n}\n")])])]),t("p",[a._v("Class不存在变量提升： ES6中的类不存在变量提升，与ES5完全不同：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("new P ();   // ReferenceError\nclass P{...};\n")])])]),t("p",[a._v("Class的name属性：")]),a._v(" "),t("p",[a._v("name属性总是返回紧跟在class后的类名。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {}\nP.name;  // 'P'\n")])])]),t("h3",{attrs:{id:"_1-15-2-constructor-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-2-constructor-方法"}},[a._v("#")]),a._v(" 1.15.2 constructor()方法")]),a._v(" "),t("p",[a._v("constructor()是类的默认方法，通过new实例化时自动调用执行，一个类必须有constructor()方法，否则一个空的constructor()会默认添加。")]),a._v(" "),t("p",[a._v("constructor()方法默认返回实例对象(即this)。")]),a._v(" "),t("p",[a._v("class P { ... }\n// 等同于\nclass P {\nconstructor(){ ... }\n}")]),a._v(" "),t("h3",{attrs:{id:"_1-15-3-类的实例对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-3-类的实例对象"}},[a._v("#")]),a._v(" 1.15.3 类的实例对象")]),a._v(" "),t("p",[a._v("与ES5一样，ES6的类必须使用new命令实例化，否则报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P { ... }\nlet a = P (1,2);     // 报错\nlet b = new P(1, 2); // 正确\n")])])]),t("p",[a._v("与 ES5 一样，实例的属性除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    toString(){\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n}\nvar point = new Point(2, 3);\n\npoint.toString() // (2, 3)\n\npoint.hasOwnProperty('x') // true\npoint.hasOwnProperty('y') // true\npoint.hasOwnProperty('toString') // false \npoint.__proto__.hasOwnProperty('toString') // true\n// toString是原型对象的属性（因为定义在Point类上）\n")])])]),t("h3",{attrs:{id:"_1-15-4-class表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-4-class表达式"}},[a._v("#")]),a._v(" 1.15.4 Class表达式")]),a._v(" "),t("p",[a._v("与函数一样，类也可以使用表达式来定义，使用表达式来作为类的名字，而class后跟的名字，用来指代当前类，只能再Class内部使用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = class P{\n    get(){\n        return P.name;\n    }\n}\n\nlet b = new a();\nb.get(); // P\nP.name;  // ReferenceError: P is not defined\n")])])]),t("p",[a._v("如果类的内部没用到的话，可以省略P，也就是可以写成下面的形式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = class { ... }\n")])])]),t("h3",{attrs:{id:"_1-15-5-私有方法和私有属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-5-私有方法和私有属性"}},[a._v("#")]),a._v(" 1.15.5 私有方法和私有属性")]),a._v(" "),t("p",[a._v("由于ES6不提供，只能变通来实现：")]),a._v(" "),t("p",[a._v("1.使用命名加以区别，如变量名前添加_，但是不保险，外面也可以调用到。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    // 公有方法\n    f1 (x) {\n        this._x(x);\n    }\n    // 私有方法\n    _x (x){\n        return this.y = x;\n    }\n}\n")])])]),t("p",[a._v("2.将私有方法移除模块，再在类内部调用call方法。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    f1 (x){\n        f2.call(this, x);\n    }\n}\nfunction f2 (x){\n    return this.y = x;\n}\n")])])]),t("p",[a._v("3.使用Symbol为私有方法命名。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const a1 = Symbol('a1');\nconst a2 = Symbol('a2');\nexport default class P{\n    // 公有方法\n    f1 (x){\n        this[a1](x);\n    }\n    // 私有方法\n    [a1](x){\n        return this[a2] = x;\n    }\n}\n")])])]),t("h3",{attrs:{id:"_1-15-6-this指向问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-6-this指向问题"}},[a._v("#")]),a._v(" 1.15.6 this指向问题")]),a._v(" "),t("p",[a._v("类内部方法的this默认指向类的实例，但单独使用该方法可能报错，因为this指向的问题。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P{\n    leoDo(thing = 'any'){\n        this.print(`Leo do ${thing}`)\n    }\n    print(text){\n        console.log(text);\n    }\n}\nlet a = new P();\nlet { leoDo } = a;\nleoDo(); // TypeError: Cannot read property 'print' of undefined\n// 问题出在 单独使用leoDo时，this指向调用的环境，\n// 但是leoDo中的this是指向P类的实例，所以报错\n")])])]),t("p",[a._v("解决方法：")]),a._v(" "),t("p",[a._v("1.在类里面绑定this")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor(){\n        this.name = this.name.bind(this);\n    }\n}\n")])])]),t("p",[a._v("2.使用箭头函数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P{\n    constructor(){\n        this.name = (name = 'leo' )=>{\n            this.print(`my name is ${name}`)\n        }\n    }\n}\n")])])]),t("h3",{attrs:{id:"_1-15-7-class的getter和setter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-7-class的getter和setter"}},[a._v("#")]),a._v(" 1.15.7 Class的getter和setter")]),a._v(" "),t("p",[a._v("使用get和set关键词对属性设置取值函数和存值函数，拦截属性的存取行为。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor (){ ... }\n    get f (){\n        return 'getter';\n    }\n    set f (val) {\n        console.log('setter: ' + val);\n    }\n}\n\nlet a = new P();\na.f = 100;   // setter : 100\na.f;          // getter\n")])])]),t("h3",{attrs:{id:"_1-15-8-class的generator方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-8-class的generator方法"}},[a._v("#")]),a._v(" 1.15.8 Class的generator方法")]),a._v(" "),t("p",[a._v("只要在方法之前加个(*)即可。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor (...args){\n        this.args = args;\n    }\n    *[Symbol.iterator](){\n        for (let arg of this.args){\n            yield arg;\n        }\n    }\n}\nfor (let k of new P('aa', 'bb')){\n    console.log(k);\n}\n// 'aa'\n// 'bb'\n")])])]),t("h3",{attrs:{id:"_1-15-9-class的静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-9-class的静态方法"}},[a._v("#")]),a._v(" 1.15.9 Class的静态方法")]),a._v(" "),t("p",[a._v("由于类相当于实例的原型，所有类中定义的方法都会被实例继承，若不想被继承，只要加上static关键字，只能通过类来调用，即“静态方法”。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P (){\n    static f1 (){ return 'aaa' };\n}\nP.f1();    // 'aa'\nlet a = new P();\na.f1();    // TypeError: a.f1 is not a function\n")])])]),t("p",[a._v("如果静态方法包含this关键字，则this指向类，而不是实例。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    static f1 (){\n        this.f2();\n    }\n    static f2 (){\n        console.log('aaa');\n    }\n    f2(){\n        console.log('bbb');\n    }\n}\nP.f2();  // 'aaa'\n")])])]),t("p",[a._v("并且静态方法可以被子类继承，或者super对象中调用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P{\n    static f1(){ return 'leo' };\n}\nclass Q extends P { ... };\nQ.f1();  // 'leo'\n\nclass R extends P {\n    static f2(){\n        return super.f1() + ',too';\n    }\n}\nR.f2();  // 'leo , too'\n")])])]),t("h3",{attrs:{id:"_1-15-10-class的静态属性和实例属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-10-class的静态属性和实例属性"}},[a._v("#")]),a._v(" 1.15.10 Class的静态属性和实例属性")]),a._v(" "),t("p",[a._v("ES6中明确规定，Class内部只有静态方法没有静态属性，所以只能通过下面实现。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 正确写法\nclass P {}\nP.a1 = 1;\nP.a1;      // 1\n\n// 无效写法\nclass P {\n    a1: 2,          // 无效\n    static a1 : 2,  // 无效\n}\nP.a1;      // undefined\n")])])]),t("p",[a._v("新提案来规定实例属性和静态属性的新写法")]),a._v(" "),t("p",[a._v("1.类的实例属性")]),a._v(" "),t("p",[a._v("类的实例属性可以用等式，写入类的定义中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    prop = 100;   // prop为P的实例属性 可直接读取\n    constructor(){\n        console.log(this.prop); // 100\n    }\n}\n")])])]),t("p",[a._v("有了新写法后，就可以不再contructor方法里定义。")]),a._v(" "),t("p",[a._v("为了可读性的目的，对于那些在constructor里面已经定义的实例属性，新写法允许直接列出。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 之前写法：\nclass RouctCounter extends React.Component {\n    constructor(prop){\n        super(prop);\n        this.state = {\n            count : 0\n        }\n    }\n}\n\n// 新写法\nclass RouctCounter extends React.Component {\n    state;\n    constructor(prop){\n        super(prop);\n        this.state = {\n            count : 0\n        }\n    }\n    \n}\n")])])]),t("p",[a._v("2.类的静态属性")]),a._v(" "),t("p",[a._v("只要在实例属性前面加上static关键字就可以。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    static prop = 100;\n    constructor(){console.log(this.prop)}; // 100\n}\n \n新写法方便静态属性的表达。\n\n// old \nclass P  { .... }\nP.a = 1;\n\n// new \nclass P {\n    static a = 1;\n}\n")])])]),t("h3",{attrs:{id:"_1-15-11-class的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-11-class的继承"}},[a._v("#")]),a._v(" 1.15.11 Class的继承")]),a._v(" "),t("p",[a._v("主要通过extends关键字实现，继承父类的所有属性和方法，通过super关键字来新建父类构造函数的this对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P { ... }\nclass Q extends P { ... }\n\nclass P { \n    constructor(x, y){\n        // ...\n    }\n    f1 (){ ... }\n}\nclass Q extends P {\n    constructor(a, b, c){\n        super(x, y);  // 调用父类 constructor(x, y)\n        this.color = color ;\n    }\n    f2 (){\n        return this.color + ' ' + super.f1(); \n        // 调用父类的f1()方法\n    }\n}\n")])])]),t("p",[a._v("子类必须在constructor()调用super()否则报错，并且只有super方法才能调用父类实例，还有就是，父类的静态方法，子类也可以继承到。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P { \n    constructor(x, y){\n        this.x = x;\n        this.y = y;\n    }\n    static fun(){\n        console.log('hello leo')\n    }\n}\n// 关键点1 调用super\nclass Q extends P {\n    constructor(){ ... }\n}\nlet a = new Q(); // ReferenceError 因为Q没有调用super\n\n// 关键点2 调用super\nclass R extends P {\n    constructor (x, y. z){\n        this.z = z; // ReferenceError 没调用super不能使用\n        super(x, y);\n        this.z = z; // 正确\n    }\n}\n\n// 关键点3 子类继承父类静态方法\nR.hello(); // 'hello leo'\n")])])]),t("p",[a._v("super关键字：")]),a._v(" "),t("p",[a._v("既可以当函数使用，还可以当对象使用。")]),a._v(" "),t("p",[a._v("1.当函数调用，代表父类的构造函数，但必须执行一次。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {... };\nclass R extends P {\n    constructor(){\n        super();\n    }\n}\n")])])]),t("p",[a._v("2.当对象调用，指向原型对象，在静态方法中指向父类。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    f (){ return 2 };\n}\nclass R extends P {\n    constructor (){\n        super();\n        console.log(super.f()); // 2\n    }\n}\nlet a = new R()\n")])])]),t("p",[a._v("注意：super指向父类原型对象，所以定义在父类实例的方法和属性，是无法通过super调用的，但是通过调用super方法可以把内部this指向当前实例，就可以访问到。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("class P {\n    constructor(){\n        this.a = 1;\n    }\n    print(){\n        console.log(this.a);\n    }\n}\nclass R extends P {\n    get f (){\n        return super.a;\n    }\n}\nlet b = new R();\nb.a; // undefined 因为a是父类P实例的属性\n\n// 先调用super就可以访问\nclass Q extends P {\n    constructor(){\n        super();   // 将内部this指向当前实例\n        return super.a;\n    }\n}\nlet c = new Q();\nc.a; // 1\n\n// 情况3\nclass J extends P {\n    constructor(){\n        super();\n        this.a = 3;\n    }\n    g(){\n        super.print();\n    }\n}\nlet c = new J();\nc.g(); // 3  由于执行了super()后 this指向当前实例\n")])])]),t("h2",{attrs:{id:"_1-16-module语法和加载实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-module语法和加载实现"}},[a._v("#")]),a._v(" 1.16 Module语法和加载实现")]),a._v(" "),t("h3",{attrs:{id:"_1-16-1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-1-介绍"}},[a._v("#")]),a._v(" 1.16.1 介绍")]),a._v(" "),t("p",[a._v("ES6之前用于JavaScript的模块加载方案，是一些社区提供的，主要有CommonJS和AMD两种，前者用于服务器，后者用于浏览器。")]),a._v(" "),t("p",[a._v("ES6提供了模块的实现，使用export命令对外暴露接口，使用import命令输入其他模块暴露的接口。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// CommonJS模块\nlet { stat, exists, readFire } = require('fs');\n\n// ES6模块\nimport { stat, exists, readFire } = from 'fs';\n")])])]),t("h3",{attrs:{id:"_1-16-2-严格模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-2-严格模式"}},[a._v("#")]),a._v(" 1.16.2 严格模式")]),a._v(" "),t("p",[a._v('ES6模块自动采用严格模式，无论模块头部是否有"use strict"。')]),a._v(" "),t("p",[a._v("严格模式有以下限制：")]),a._v(" "),t("p",[a._v("变量必须声明后再使用")]),a._v(" "),t("p",[a._v("函数的参数不能有同名属性，否则报错")]),a._v(" "),t("p",[a._v("不能使用with语句")]),a._v(" "),t("p",[a._v("不能对只读属性赋值，否则报错")]),a._v(" "),t("p",[a._v("不能使用前缀 0 表示八进制数，否则报错")]),a._v(" "),t("p",[a._v("不能删除不可删除的属性，否则报错")]),a._v(" "),t("p",[a._v("不能删除变量delete prop，会报错，只能删除属性delete * global[prop]")]),a._v(" "),t("p",[a._v("eval不会在它的外层作用域引入变量")]),a._v(" "),t("p",[a._v("eval和arguments不能被重新赋值")]),a._v(" "),t("p",[a._v("arguments不会自动反映函数参数的变化")]),a._v(" "),t("p",[a._v("不能使用arguments.callee")]),a._v(" "),t("p",[a._v("不能使用arguments.caller")]),a._v(" "),t("p",[a._v("禁止this指向全局对象")]),a._v(" "),t("p",[a._v("不能使用fn.caller和fn.arguments获取函数调用的堆栈")]),a._v(" "),t("p",[a._v("增加了保留字（比如protected、static和interface）")]),a._v(" "),t("p",[a._v("特别是，ES6中顶层this指向undefined，即不应该在顶层代码使用this。")]),a._v(" "),t("h3",{attrs:{id:"_1-16-3-export命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-3-export命令"}},[a._v("#")]),a._v(" 1.16.3 export命令")]),a._v(" "),t("p",[a._v("使用export向模块外暴露接口，可以是方法，也可以是变量。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 1. 变量\nexport let a = 'leo';\nexport let b = 100;\n\n// 还可以\nlet a = 'leo';\nlet b = 100;\nexport {a, b};\n\n// 2. 方法\nexport function f(a,b){\n    return a*b;\n}\n\n// 还可以\nfunction f1 (){ ... }\nfunction f2 (){ ... }\nexport {\n    a1 as f1,\n    a2 as f2\n}\n")])])]),t("p",[a._v("可以使用as重命名函数的对外接口。")]),a._v(" "),t("p",[a._v("特别注意：")]),a._v(" "),t("p",[a._v("export暴露的必须是接口，不能是值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 错误\nexport 1; // 报错\n\nlet a = 1;\nexport a; // 报错\n\n// 正确\nexport let a = 1; // 正确\n\nlet a = 1;\nexport {a};       // 正确\n\nlet a = 1;\nexport { a as b}; // 正确\n")])])]),t("p",[a._v("暴露方法也是一样:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 错误\nfunction f(){...};\nexport f;\n\n// 正确\nexport function f () {...};\n\nfunction f(){...};\nexport {f};\n")])])]),t("h3",{attrs:{id:"_1-16-4-import命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-4-import命令"}},[a._v("#")]),a._v(" 1.16.4 import命令")]),a._v(" "),t("p",[a._v("加载export暴露的接口，输出为变量。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import { a, b } from '/a.js';\nfunction f(){\n    return a + b;\n}\n")])])]),t("p",[a._v("import后大括号指定变量名，需要与export的模块暴露的名称一致。")]),a._v(" "),t("p",[a._v("也可以使用as为输入的变量重命名。")]),a._v(" "),t("p",[a._v("import { a as leo } from './a.js';")]),a._v(" "),t("p",[a._v("import不能直接修改输入变量的值，因为输入变量只读只是个接口，但是如果是个对象，可以修改它的属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 错误\nimport {a} from './f.js';\na = {}; // 报错\n\n// 正确\na.foo = 'leo';  // 不报错\n")])])]),t("p",[a._v("import命令具有提升效果，会提升到整个模块头部最先执行，且多次执行相同import只会执行一次。")]),a._v(" "),t("h3",{attrs:{id:"_1-16-5-模块的整体加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-5-模块的整体加载"}},[a._v("#")]),a._v(" 1.16.5 模块的整体加载")]),a._v(" "),t("p",[a._v("当一个模块暴露多个方法和变量，引用时可以用*整体加载。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// a.js\nexport function f(){...}\nexport function g(){...}\n\n// b.js\nimport * as obj from '/a.js';\nconsole.log(obj.f());\nconsole.log(obj.g());\n")])])]),t("p",[a._v("但是，不允许运行时改变：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import * as obj from '/a.js';\n// 不允许\nobj.a = 'leo';   \nobj.b = function(){...}; \n")])])]),t("h3",{attrs:{id:"_1-16-6-export-default-命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-6-export-default-命令"}},[a._v("#")]),a._v(" 1.16.6 export default 命令")]),a._v(" "),t("p",[a._v("使用export default命令，为模块指定默认输出，引用的时候直接指定任意名称即可。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// a.js\nexport default function(){console.log('leo')};\n\n// b.js\nimport leo from './a.js';\nleo(); // 'leo'\n")])])]),t("p",[a._v("export defualt暴露有函数名的函数时，在调用时相当于匿名函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// a.js\nexport default function f(){console.log('leo')};\n// 或者\nfunction f(){console.log('leo')};\nexport default f;\n\n// b.js\nimport leo from './a.js';\n \nexport defualt其实是输出一个名字叫default的变量，所以后面不能跟变量赋值语句。\n\n// 正确\nexport let a= 1;\n\nlet a = 1;\nexport defualt a;\n\n// 错误\nexport default let a = 1;\n")])])]),t("p",[a._v("export default命令的本质是将后面的值，赋给default变量，所以可以直接将一个值写在export default之后。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 正确\nexport default 1;\n// 错误\nexport 1;\n")])])]),t("h3",{attrs:{id:"_1-16-7-export-和-import-复合写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-7-export-和-import-复合写法"}},[a._v("#")]),a._v(" 1.16.7 export 和 import 复合写法")]),a._v(" "),t("p",[a._v("常常在先输入后输出同一个模块使用，即转发接口，将两者写在一起。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("export {a, b} from './leo.js';\n\n// 理解为\nimport {a, b} from './leo.js';\nexport {a, b}\n")])])]),t("p",[a._v("常见的写法还有：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 接口改名\nexport { a as b} from './leo.js';\n\n// 整体输出\nexport *  from './leo.js';\n\n// 默认接口改名\nexport { default as a } from './leo.js';\n")])])]),t("p",[a._v("常常用在模块继承。")]),a._v(" "),t("h3",{attrs:{id:"_1-16-8-浏览器中的加载规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-8-浏览器中的加载规则"}},[a._v("#")]),a._v(" 1.16.8 浏览器中的加载规则")]),a._v(" "),t("p",[a._v('ES6中，可以在浏览器使用 <script> 标签，需要加入type="module"属性，并且这些都是异步加载，避免浏览器阻塞，即等到整个页面渲染完，再执行模块脚本，等同于打开了 <script> 标签的defer属性。')]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<script type="module" src="./a.js"><\/script>\n')])])]),t("p",[a._v("另外，ES6模块也可以内嵌到网页，语法与外部加载脚本一致：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("<script type=\"module\">\n    import a from './a.js';\n<\/script>\n")])])]),t("p",[a._v("注意点：")]),a._v(" "),t("p",[a._v("代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。")]),a._v(" "),t("p",[a._v("模块脚本自动采用严格模式，不管有没有声明use strict。")]),a._v(" "),t("p",[a._v("模块之中，可以使用import命令加载其他模块（.js后缀不可省略，需要提供绝对 URL 或相对 URL），也可以使用export命令输出对外接口。")]),a._v(" "),t("p",[a._v("模块之中，顶层的this关键字返回undefined，而不是指向window。也就是说，在模块顶层使用this关键字，是无意义的。")]),a._v(" "),t("p",[a._v("同一个模块如果加载多次，将只执行一次。")]),a._v(" "),t("h2",{attrs:{id:"_2-es7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-es7"}},[a._v("#")]),a._v(" 2. ES7")]),a._v(" "),t("h2",{attrs:{id:"_2-1-array-prototype-includes-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-array-prototype-includes-方法"}},[a._v("#")]),a._v(" 2.1 Array.prototype.includes()方法")]),a._v(" "),t("p",[a._v("includes()用于查找一个值是否在数组中，如果在返回true，否则返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("['a', 'b', 'c'].includes('a');     // true\n['a', 'b', 'c'].includes('d');     // false\n")])])]),t("p",[a._v("includes()方法接收两个参数，搜索的内容和开始搜索的索引，默认值为0，若搜索值在数组中则返回true否则返回false。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("['a', 'b', 'c', 'd'].includes('b');      // true\n['a', 'b', 'c', 'd'].includes('b', 1);   // true\n['a', 'b', 'c', 'd'].includes('b', 2);   // false\n")])])]),t("p",[a._v("与indexOf方法对比，下面方法效果相同：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("['a', 'b', 'c', 'd'].indexOf('b') > -1;       // true\n['a', 'b', 'c', 'd'].includes('b'); // true \n")])])]),t("p",[a._v("includes()与indexOf对比：")]),a._v(" "),t("p",[a._v("includes相比indexOf更具语义化，includes返回的是是否存在的具体结果，值为布尔值，而indexOf返回的是搜索值的下标。")]),a._v(" "),t("p",[a._v("includes相比indexOf更准确，includes认为两个NaN相等，而indexOf不会。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = [1, NaN, 3];\na.indexOf(NaN);     // -1\na.includes(NaN);    // true\n")])])]),t("p",[a._v("另外在判断+0与-0时，includes和indexOf的返回相同。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[1, +0, 3, 4].includes(-0);   // true\n[1, +0, 3, 4].indexOf(-0);    // 1\n")])])]),t("h2",{attrs:{id:"_2-2-指数操作符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-指数操作符"}},[a._v("#")]),a._v(" 2.2 指数操作符(**)")]),a._v(" "),t("p",[a._v("基本用法:")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 3 ** 2 ; // 9\n// 等效于\nMath.pow(3, 2);  // 9\n")])])]),t("p",[a._v("**是一个运算符，也可以满足类似假发的操作，如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = 3;\na **= 2;    // 9\n")])])]),t("h2",{attrs:{id:"_3-es8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-es8"}},[a._v("#")]),a._v(" 3. ES8")]),a._v(" "),t("h2",{attrs:{id:"_3-1-async函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-async函数"}},[a._v("#")]),a._v(" 3.1 async函数")]),a._v(" "),t("p",[a._v("###3.1.1 介绍")]),a._v(" "),t("p",[a._v("ES8引入async函数，是为了使异步操作更加方便，其实它就是Generator函数的语法糖。")]),a._v(" "),t("p",[a._v("async函数使用起来，只要把Generator函数的（*）号换成async，yield换成await即可。对比如下：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// Generator写法\nconst fs = require('fs');\nconst readFile = function (fileName) {\n  return new Promise(function (resolve, reject) {\n    fs.readFile(fileName, function(error, data) {\n      if (error) return reject(error);\n      resolve(data);\n    });\n  });\n};\nconst gen = function* () {\n  const f1 = yield readFile('/etc/fstab');\n  const f2 = yield readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n\n// async await写法\nconst asyncReadFile = async function () {\n  const f1 = await readFile('/etc/fstab');\n  const f2 = await readFile('/etc/shells');\n  console.log(f1.toString());\n  console.log(f2.toString());\n};\n")])])]),t("p",[a._v("对比Genenrator有四个优点：")]),a._v(" "),t("p",[a._v("(1)内置执行器 Generator函数执行需要有执行器，而async函数自带执行器，即async函数与普通函数一模一样：\nasync f();")]),a._v(" "),t("p",[a._v("(2)更好的语义 async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。")]),a._v(" "),t("p",[a._v("(3)更广的适用性 yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。")]),a._v(" "),t("p",[a._v("(4)返回值是Promise async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。")]),a._v(" "),t("p",[a._v("进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。")]),a._v(" "),t("h3",{attrs:{id:"_3-1-2-基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-2-基本用法"}},[a._v("#")]),a._v(" 3.1.2 基本用法")]),a._v(" "),t("p",[a._v("async函数返回一个Promise对象，可以使用then方法添加回调函数，函数执行时，遇到await就会先返回，等到异步操作完成，在继续执行。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(item){\n    let a = await g(item);\n    let b = await h(item);\n    return b;\n}\nf('hello').then(res => {\n    console.log(res);\n})\n")])])]),t("p",[a._v("async表明该函数内部有异步操作，调用该函数时，会立即返回一个Promise对象。")]),a._v(" "),t("p",[a._v("另外还有个定时的案例，指定时间后执行：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function f (ms){\n    return new Promise(res => {\n        setTimeout(res, ms);\n    });\n}\nasync function g(val, ms){\n    await f(ms);\n    console.log(val);\n}\ng('leo', 50);\n")])])]),t("p",[a._v("async函数还有很多使用形式：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 函数声明\nasync function f (){...}\n\n// 函数表达式\nlet f = async function (){...}\n\n// 对象的方法\nlet a = {\n    async f(){...}\n}\na.f().then(...)\n\n// Class的方法\nclass c {\n    constructor(){...}\n    async f(){...}\n}\n")])])]),t("p",[a._v("// 箭头函数")]),a._v(" "),t("p",[a._v("let f = async () => {...}")]),a._v(" "),t("h3",{attrs:{id:"_3-1-3-返回promise对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-3-返回promise对象"}},[a._v("#")]),a._v(" 3.1.3 返回Promise对象")]),a._v(" "),t("p",[a._v("async内部return返回的值会作为then方法的参数，另外只有async函数内部的异步操作执行完，才会执行then方法指定的回调函数。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    return 'leo';\n}\nf().then(res => { console.log (res) }); // 'leo'\n")])])]),t("p",[a._v("async内部抛出的错误，会被catch接收。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    throw new Error('err');\n}\nf().then (\n    v => console.log(v),\n    e => console.log(e)\n)\n// Error: err\n")])])]),t("h3",{attrs:{id:"_3-1-4-await命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-4-await命令"}},[a._v("#")]),a._v(" 3.1.4 await命令")]),a._v(" "),t("p",[a._v("通常await后面是一个Promise对象，如果不是就返回对应的值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    return await 10;\n}\nf().then(v => console.log(v)); // 10\n")])])]),t("p",[a._v("我们常常将async await和try..catch一起使用，并且可以放多个await命令，也是防止异步操作失败因为中断后续异步操作的情况。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    try{\n        await Promise.reject('err');\n    }catch(err){ ... }\n    return await Promise.resolve('leo');\n}\nf().then(v => console.log(v)); // 'leo'\n")])])]),t("h3",{attrs:{id:"_3-1-5-使用注意"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-5-使用注意"}},[a._v("#")]),a._v(" 3.1.5 使用注意")]),a._v(" "),t("p",[a._v("(1)await命令放在try...catch代码块中，防止Promise返回rejected。")]),a._v(" "),t("p",[a._v("(2)若多个await后面的异步操作不存在继发关系，最好让他们同时执行。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 效率低\nlet a = await f();\nlet b = await g();\n\n// 效率高\nlet [a, b] = await Promise.all([f(), g()]);\n// 或者\nlet a = f();\nlet b = g();\nlet a1 = await a();\nlet b1 = await b();\n")])])]),t("p",[a._v("(3)await命令只能用在async函数之中，如果用在普通函数，就会报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 错误\nasync function f(){\n    let a = [{}, {}, {}];\n    a.forEach(v =>{  // 报错，forEach是普通函数\n        await post(v);\n    });\n}\n\n// 正确\nasync function f(){\n    let a = [{}, {}, {}];\n    for(let k of a){\n        await post(k);\n    }\n}\n")])])]),t("h2",{attrs:{id:"_3-2-promise-prototype-finally"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-promise-prototype-finally"}},[a._v("#")]),a._v(" 3.2 Promise.prototype.finally()")]),a._v(" "),t("p",[a._v("finally()是ES8中Promise添加的一个新标准，用于指定不管Promise对象最后状态（是fulfilled还是rejected）如何，都会执行此操作，并且finally方法必须写在最后面，即在then和catch方法后面。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 写法如下：  \npromise\n    .then(res => {...})\n    .catch(err => {...})\n    .finally(() => {...})\n \n// finally方法常用在处理Promise请求后关闭服务器连接：\n\nserver.listen(port)\n    .then(() => {..})\n    .finally(server.stop);\n \n// 本质上，finally方法是then方法的特例：\n\npromise.finally(() => {...});\n\n// 等同于\npromise.then(\n    result => {\n        // ...\n        return result\n    }, \n    error => {\n        // ...\n        throw error\n    }\n)\n")])])]),t("h2",{attrs:{id:"_3-3-object-values-，object-entries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-object-values-，object-entries"}},[a._v("#")]),a._v(" 3.3 Object.values()，Object.entries()")]),a._v(" "),t("p",[a._v("ES7中新增加的 Object.values()和Object.entries()与之前的Object.keys()类似，返回数组类型。")]),a._v(" "),t("p",[a._v("回顾下Object.keys()：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = { f1: 'hi', f2: 'leo'};\nObject.keys(a); // ['f1', 'f2']\n")])])]),t("h3",{attrs:{id:"_3-3-1-object-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-object-values"}},[a._v("#")]),a._v(" 3.3.1 Object.values()")]),a._v(" "),t("p",[a._v("返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { f1: 'hi', f2: 'leo'};\nObject.values(a); // ['hi', 'leo']\n")])])]),t("p",[a._v("如果参数不是对象，则返回空数组：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Object.values(10);   // []\nObject.values(true); // []\n")])])]),t("h3",{attrs:{id:"_3-3-2-object-entries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-object-entries"}},[a._v("#")]),a._v(" 3.3.2 Object.entries()")]),a._v(" "),t("p",[a._v("返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历属性的键值对数组。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { f1: 'hi', f2: 'leo'};\nObject.entries(a); // [['f1','hi'], ['f2', 'leo']]\n")])])]),t("p",[a._v("用途1：\n遍历对象属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { f1: 'hi', f2: 'leo'};\nfor (let [k, v] of Object.entries(a)){\n    console.log(\n        `${JSON.stringfy(k)}:${JSON.stringfy(v)}`\n    )\n}```\n// 'f1':'hi'\n// 'f2':'leo'\n")])])]),t("p",[a._v("用途2： 将对象转为真正的Map结构。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { f1: 'hi', f2: 'leo'};\nlet map = new Map(Object.entries(a));\n")])])]),t("p",[a._v("手动实现Object.entries()方法：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// Generator函数实现：  \nfunction* entries(obj){\n    for (let k of Object.keys(obj)){\n        yield [k ,obj[k]];\n    }\n}\n\n// 非Generator函数实现：\nfunction entries (obj){\n    let arr = [];\n    for(let k of Object.keys(obj)){\n        arr.push([k, obj[k]]);\n    }\n    return arr;\n}\n")])])]),t("h2",{attrs:{id:"_3-4-object-getownpropertydescriptors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-object-getownpropertydescriptors"}},[a._v("#")]),a._v(" 3.4 Object.getOwnPropertyDescriptors()")]),a._v(" "),t("p",[a._v("之前有Object.getOwnPropertyDescriptor方法会返回某个对象属性的描述对象，新增的Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非继承属性）的描述对象，所有原对象的属性名都是该对象的属性名，对应的属性值就是该属性的描述对象")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {\n    a1:1,\n    get f1(){ return 100}\n}\nObject.getOwnPropetyDescriptors(a);\n/*\n{ \n    a:{ configurable:true, enumerable:true, value:1, writeable:true}\n    f1:{ configurable:true, enumerable:true, get:f, set:undefined}\n}\n*/\n")])])]),t("p",[a._v("实现原理：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function getOwnPropertyDescriptors(obj) {\n  const result = {};\n  for (let key of Reflect.ownKeys(obj)) {\n    result[key] = Object.getOwnPropertyDescriptor(obj, key);\n  }\n  return result;\n}\n")])])]),t("p",[a._v("引入这个方法，主要是为了解决Object.assign()无法正确拷贝get属性和set属性的问题。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {\n    set f(v){\n        console.log(v)\n    }\n}\nlet b = {};\nObject.assign(b, a);\nObject.a(b, 'f');\n/*\nf = {\n    configurable: true,\n    enumable: true,\n    value: undefined,\n    writeable: true\n}\n*/\n")])])]),t("p",[a._v("value为undefined是因为Object.assign方法不会拷贝其中的get和set方法，使用getOwnPropertyDescriptors配合Object.defineProperties方法来实现正确的拷贝：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {\n    set f(v){\n        console.log(v)\n    }\n}\nlet b = {};\nObject.defineProperties(b, Object.getOwnPropertyDescriptors(a));\nObject.getOwnPropertyDescriptor(b, 'f')\n/*\n    configurable: true,\n    enumable: true,\n    get: undefined,\n    set: function(){...}\n*/\n")])])]),t("p",[a._v("Object.getOwnPropertyDescriptors方法的配合Object.create方法，将对象属性克隆到一个新对象，实现浅拷贝。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const clone = Object.create(Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj));\n\n// 或者\nconst shallowClone = (obj) => Object.create(\n  Object.getPrototypeOf(obj),\n  Object.getOwnPropertyDescriptors(obj)\n);\n")])])]),t("h2",{attrs:{id:"_3-5-字符串填充-padstart和padend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-字符串填充-padstart和padend"}},[a._v("#")]),a._v(" 3.5 字符串填充 padStart和padEnd")]),a._v(" "),t("p",[a._v("用来为字符串填充特定字符串，并且都有两个参数：字符串目标长度和填充字段，第二个参数可选，默认空格。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("'es8'.padStart(2);          // 'es8'\n'es8'.padStart(5);          // '  es8'\n'es8'.padStart(6, 'woof');  // 'wooes8'\n'es8'.padStart(14, 'wow');  // 'wowwowwowwoes8'\n'es8'.padStart(7, '0');     // '0000es8'\n\n'es8'.padEnd(2);            // 'es8'\n'es8'.padEnd(5);            // 'es8  '\n'es8'.padEnd(6, 'woof');    // 'es8woo'\n'es8'.padEnd(14, 'wow');    // 'es8wowwowwowwo'\n'es8'.padEnd(7, '6');       // 'es86666'\n")])])]),t("p",[a._v("从上面结果来看，填充函数只有在字符长度小于目标长度时才有效，若字符长度已经等于或小于目标长度时，填充字符不会起作用，而且目标长度如果小于字符串本身长度时，字符串也不会做截断处理，只会原样输出。")]),a._v(" "),t("h2",{attrs:{id:"_3-6-函数参数列表与调用中的尾部逗号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-函数参数列表与调用中的尾部逗号"}},[a._v("#")]),a._v(" 3.6 函数参数列表与调用中的尾部逗号")]),a._v(" "),t("p",[a._v("该特性允许我们在定义或者调用函数时添加尾部逗号而不报错：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function es8(var1, var2, var3,) {\n  // ...\n}\nes8(10, 20, 30,);\n")])])]),t("h2",{attrs:{id:"_3-7-共享内存与原子操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-共享内存与原子操作"}},[a._v("#")]),a._v(" 3.7 共享内存与原子操作")]),a._v(" "),t("p",[a._v("当内存被共享时，多个线程可以并发读、写内存中相同的数据。原子操作可以确保那些被读、写的值都是可预期的，即新的事务是在旧的事务结束之后启动的，旧的事务在结束之前并不会被中断。这部分主要介绍了 ES8 中新的构造函数 SharedArrayBuffer 以及拥有许多静态方法的命名空间对象 Atomic 。")]),a._v(" "),t("p",[a._v("Atomic 对象类似于 Math 对象，拥有许多静态方法，所以我们不能把它当做构造函数。 Atomic 对象有如下常用的静态方法：")]),a._v(" "),t("p",[a._v("add /sub :为某个指定的value值在某个特定的位置增加或者减去某个值")]),a._v(" "),t("p",[a._v("and / or /xor :进行位操作")]),a._v(" "),t("p",[a._v("load :获取特定位置的值")]),a._v(" "),t("h2",{attrs:{id:"_4-es9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-es9"}},[a._v("#")]),a._v(" 4. ES9")]),a._v(" "),t("h2",{attrs:{id:"_4-1-对象的拓展运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-对象的拓展运算符"}},[a._v("#")]),a._v(" 4.1 对象的拓展运算符")]),a._v(" "),t("h3",{attrs:{id:"_4-1-1-介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-1-介绍"}},[a._v("#")]),a._v(" 4.1.1 介绍")]),a._v(" "),t("p",[a._v("对象的拓展运算符，即对象的Rest/Spread属性，可将对象解构赋值用于从一个对象取值，搜键值对分配到指定对象上，与数组的拓展运算符类似：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let  {x, y, ...z} = {x:1, y:2, a:3, b:4};\nx;  // 1\ny;  // 2\nz;  // {a:3, b:4} \n")])])]),t("p",[a._v("对象的解构赋值要求等号右边必须是个对象，所以如果等号右边是undefined或null就会报错无法转成对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let {a, ...b} = null;      // 运行时报错\nlet {a, ...b} = undefined; // 运行时报错\n")])])]),t("p",[a._v("解构赋值必须是最后一个参数，否则报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let {...a, b, c} = obj;     // 语法错误\nlet {a, ...b, c} = obj;     // 语法错误\n")])])]),t("p",[a._v("注意：")]),a._v(" "),t("p",[a._v("1.解构赋值是浅拷贝。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {a1: {a2: 'leo'}};\n\nlet {...b} = a;\n\na.a1.a2 = 'leo';\nb.a1.a2 = 'leo';\n")])])]),t("p",[a._v("2.拓展运算符的解构赋值，不能复制继承自原型对象的属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let o1 = { a: 1 };\nlet o2 = { b: 2 };\no2.__proto__ = o1;\nlet { ...o3 } = o2;\no3;    // { b: 2 }\no3.a;  // undefined\n")])])]),t("h3",{attrs:{id:"_4-1-2-使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-2-使用场景"}},[a._v("#")]),a._v(" 4.1.2 使用场景")]),a._v(" "),t("p",[a._v("1.取出参数对象所有可遍历属性，拷贝到当前对象中。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { a1:1, a2:2 };\nlet b = { ...a };\nb;   // { a1:1, a2:2 }\n\n// 类似Object.assign方法\n")])])]),t("p",[a._v("2.合并两个对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { a1:1, a2:2 };\nlet b = { b1:11, b2:22 };\nlet ab = { ...a, ...b }; // {a1: 1, a2: 2, b1: 11, b2: 22}\n// 等同于\nlet ab = Object.assign({}, a, b);\n")])])]),t("p",[a._v("3.将自定义属性放在拓展运算符后面，覆盖对象原有的同名属性。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { a1:1, a2:2, a3:3 };\nlet r = { ...a, a3:666 };   \n// r {a1: 1, a2: 2, a3: 666}\n\n// 等同于\nlet r = { ...a, ...{ a3:666 }};\n// r {a1: 1, a2: 2, a3: 666}\n\n// 等同于\nlet r = Object.assign({}, a, { a3:666 });\n// r {a1: 1, a2: 2, a3: 666}\n")])])]),t("p",[a._v("4.将自定义属性放在拓展运算符前面，就会成为设置新对象的默认值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { a1:1, a2:2 };\nlet r = { a3:666, ...a };\n// r {a3: 666, a1: 1, a2: 2}\n\n// 等同于\nlet r = Object.assign({}, {a3:666}, a);\n// r {a3: 666, a1: 1, a2: 2}\n\n// 等同于\nlet r = Object.assign({a3:666}, a);\n// r {a3: 666, a1: 1, a2: 2}\n")])])]),t("p",[a._v("5.拓展运算符后面可以使用表达式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = {\n    ...(x>1? {a:!:{}),\n    b:2\n}\n")])])]),t("p",[a._v("6.拓展运算符后面如果是个空对象，则没有任何效果。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("{...{}, a:1};  // {a:1}\n")])])]),t("p",[a._v("7.若参数是null或undefined则忽略且不报错。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = { ...null, ...undefined }; // 不报错\n")])])]),t("p",[a._v("8.若有取值函数get则会执行。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 不会打印 因为f属性只是定义 而不没执行\nlet a = {\n    ...a1,\n    get f(){console.log(1)}\n}\n\n// 会打印 因为f执行了\nlet a = {\n    ...a1,\n    ...{\n        get f(){console.log(1)}\n    }\n}\n")])])]),t("h2",{attrs:{id:"_4-2-正则表达式-s-修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-正则表达式-s-修饰符"}},[a._v("#")]),a._v(" 4.2 正则表达式 s 修饰符")]),a._v(" "),t("p",[a._v("在正则表达式中，点(.)可以表示任意单个字符，除了两个：用u修饰符解决四个字节的UTF-16字符，另一个是行终止符。")]),a._v(" "),t("p",[a._v("终止符即表示一行的结束，如下四个字符属于“行终止符”：")]),a._v(" "),t("p",[a._v("U+000A 换行符（\\n）")]),a._v(" "),t("p",[a._v("U+000D 回车符（\\r）")]),a._v(" "),t("p",[a._v("U+2028 行分隔符（line separator）")]),a._v(" "),t("p",[a._v("U+2029 段分隔符（paragraph separator）")]),a._v(" "),t("p",[a._v("/foo.bar/.test('foo\\nbar')\n// false")]),a._v(" "),t("p",[a._v("上面代码中，因为.不匹配\\n，所以正则表达式返回false。")]),a._v(" "),t("p",[a._v("可以匹配任意单个字符：")]),a._v(" "),t("p",[a._v("/foo[^]bar/.test('foo\\nbar')\n// true")]),a._v(" "),t("p",[a._v("ES9引入s修饰符，使得.可以匹配任意单个字符：")]),a._v(" "),t("p",[a._v("/foo.bar/s.test('foo\\nbar') // true")]),a._v(" "),t("p",[a._v("这被称为dotAll模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个dotAll属性，返回一个布尔值，表示该正则表达式是否处在dotAll模式。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("const re = /foo.bar/s;\n// 另一种写法\n// const re = new RegExp('foo.bar', 's');\n\nre.test('foo\\nbar') // true\nre.dotAll // true\nre.flags // 's'\n \n/s修饰符和多行修饰符/m不冲突，两者一起使用的情况下，.匹配所有字符，而^和$匹配每一行的行首和行尾。\n")])])]),t("h2",{attrs:{id:"_4-3-异步遍历器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-异步遍历器"}},[a._v("#")]),a._v(" 4.3 异步遍历器")]),a._v(" "),t("p",[a._v("在前面ES6章节中，介绍了Iterator接口，而ES6引入了“异步遍历器”，是为异步操作提供原生的遍历器接口，即value和done这两个属性都是异步产生的。")]),a._v(" "),t("h3",{attrs:{id:"_4-3-1-异步遍历的接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-异步遍历的接口"}},[a._v("#")]),a._v(" 4.3.1 异步遍历的接口")]),a._v(" "),t("p",[a._v("通过调用遍历器的next方法，返回一个Promise对象。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a.next().then( \n    ({value, done}) => {\n        //...\n    }\n)\n")])])]),t("p",[a._v("上述a为异步遍历器，调用next后返回一个Promise对象，再调用then方法就可以指定Promise对象状态变为resolve后执行的回调函数，参数为value和done两个属性的对象，与同步遍历器一致。")]),a._v(" "),t("p",[a._v("与同步遍历器一样，异步遍历器接口也是部署在Symbol.asyncIterator属性上，只要有这个属性，就都可以异步遍历。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = createAsyncIterable(['a', 'b']);\n//createAsyncIterable方法用于构建一个iterator接口\nlet b = a[Symbol.asyncInterator]();\n\nb.next().then( result1 => {\n    console.log(result1); // {value: 'a', done:false}\n    return b.next();\n}).then( result2 => {\n    console.log(result2); // {value: 'b', done:false}\n    return b.next();\n}).then( result3 => {\n    console.log(result3); // {value: undefined, done:true}\n})\n")])])]),t("p",[a._v("另外next方法返回的是一个Promise对象，所以可以放在await命令后。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    let a = createAsyncIterable(['a', 'b']);\n    let b = a[Symbol.asyncInterator]();\n    console.log(await b.next());// {value: 'a', done:false}\n    console.log(await b.next());// {value: 'b', done:false}\n    console.log(await b.next());// {value: undefined, done:true}\n}\n")])])]),t("p",[a._v("还有一种情况，使用Promise.all方法，将所有的next按顺序连续调用：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = createAsyncIterable(['a', 'b']);\nlet b = a[Symbol.asyncInterator]();\nlet {{value:v1}, {value:v2}} = await Promise.all([\n    b.next(), b.next()\n])\n")])])]),t("p",[a._v("也可以一次调用所有next方法，再用await最后一步操作。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    let write = openFile('aaa.txt');\n    write.next('hi');\n    write.next('leo');\n    await write.return();\n}\nf();\n")])])]),t("h3",{attrs:{id:"_4-3-2-for-await-of"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-for-await-of"}},[a._v("#")]),a._v(" 4.3.2 for await...of")]),a._v(" "),t("p",[a._v("for...of用于遍历同步的Iterator接口，而ES8引入for await...of遍历异步的Iterator接口。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    for await(let a of createAsyncIterable(['a', 'b'])) {\n        console.log(x);\n    }\n}\n// a\n// b\n")])])]),t("p",[a._v("上面代码，createAsyncIterable()返回一个拥有异步遍历器接口的对象，for...of自动调用这个对象的next方法，得到一个Promise对象，await用来处理这个Promise，一但resolve就把得到的值x传到for...of里面。")]),a._v(" "),t("p",[a._v("用途: 直接把部署了asyncIteable操作的异步接口放入这个循环。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("let a = '';\nasync function f(){\n    for await (let b of req) {\n        a += b;\n    }\n    let c = JSON.parse(a);\n    console.log('leo', c);\n}\n")])])]),t("p",[a._v("当next返回的Promise对象被reject，for await...of就会保错，用try...catch捕获。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function f(){\n    try{\n        for await (let a of iterableObj()){\n            console.log(a);\n        }\n    }catch(e){\n        console.error(e);\n    }\n}\n")])])]),t("p",[a._v("注意，for await...of循环也可以用于同步遍历器。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("(async function () {\n  for await (let a of ['a', 'b']) {\n    console.log(a);\n  }\n})();\n// a\n// b\n")])])]),t("h3",{attrs:{id:"_4-3-3-异步generator函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-3-异步generator函数"}},[a._v("#")]),a._v(" 4.3.3 异步Generator函数")]),a._v(" "),t("p",[a._v("就像 Generator 函数返回一个同步遍历器对象一样，异步 Generator 函数的作用，是返回一个异步遍历器对象。\n在语法上，异步 Generator 函数就是async函数与 Generator 函数的结合。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function* f() {\n  yield 'hi';\n}\nconst a = f();\na.next().then(x => console.log(x));\n// { value: 'hello', done: false }\n")])])]),t("p",[a._v("设计异步遍历器的目的之一，就是为了让Generator函数能用同一套接口处理同步和异步操作。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 同步Generator函数\nfunction * f(iterable, fun){\n    let a = iterabl[Symbol.iterator]();\n    while(true){\n        let {val, done} = a.next();\n        if(done) break;\n        yield fun(val);\n    }\n}\n\n// 异步Generator函数\nasync function * f(iterable, fun){\n    let a = iterabl[Symbol.iterator]();\n    while(true){\n        let {val, done} = await a.next();\n        if(done) break;\n        yield fun(val);\n    }\n}\n")])])]),t("p",[a._v("同步和异步Generator函数相同点：在yield时用next方法停下，将后面表达式的值作为next()返回对象的value。")]),a._v(" "),t("p",[a._v("在异步Generator函数中，同时使用await和yield，简单样理解，await命令用于将外部操作产生的值输入函数内部，yield命令用于将函数内部的值输出。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("(async function () {\n  for await (const line of readLines(filePath)) {\n    console.log(line);\n  }\n})()\n")])])]),t("p",[a._v("异步 Generator 函数可以与for await...of循环结合起来使用。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function* f(asyncIterable) {\n  for await (const line of asyncIterable) {\n    yield '> ' + line;\n  }\n}\n")])])]),t("h3",{attrs:{id:"_4-3-4-yield-语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-4-yield-语句"}},[a._v("#")]),a._v(" 4.3.4 yield* 语句")]),a._v(" "),t("p",[a._v("yield*语句跟一个异步遍历器。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("async function * f(){\n  yield 'a';\n  yield 'b';\n  return 'leo';\n}\nasync function * g(){\n  const a = yield* f();  // a => 'leo'\n}\n")])])]),t("p",[a._v("与同步 Generator 函数一样，for await...of循环会展开yield*。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("(async function () {\n  for await (const x of gen2()) {\n    console.log(x);\n  }\n})();\n// a\n// b\n")])])]),t("h2",{attrs:{id:"_5-知识补充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-知识补充"}},[a._v("#")]),a._v(" 5. 知识补充")]),a._v(" "),t("h2",{attrs:{id:"_5-1-块级作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-块级作用域"}},[a._v("#")]),a._v(" 5.1 块级作用域")]),a._v(" "),t("p",[a._v("通常指一个函数内部，或者一个代码块内部。\n比如：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function fun1 () {\n    // 块级作用域\n    if (true) {\n        // 块级作用域\n    }\n}\n")])])]),t("p",[a._v("缺点： 1.导致内层变量覆盖外层变量")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a1 = new Date();\nfunction f1 (){\n    console.log(a1); // undefined\n    if (false) {\n        var a1 = 'hello'\n    }\n}\n")])])]),t("p",[a._v("输出 undefined 是因为 if 内的 a1 变量声明的变量提升，导致内部的 a1 覆盖外部的 a1，所以输出为 undefined 。")]),a._v(" "),t("p",[a._v("2.变量的全局污染")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var a = 'hello';\nfor (var i = 0; i< a.length; i++) {\n    //...\n}\nconsole.log(i); // 5\n")])])]),t("p",[a._v("循环结束后，变量 i 的值依然存在，造成变量的全局污染。")]),a._v(" "),t("h3",{attrs:{id:"_5-2-es5-6对数组空位的处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-es5-6对数组空位的处理"}},[a._v("#")]),a._v(" 5.2 ES5/6对数组空位的处理")]),a._v(" "),t("p",[a._v("数组的空位不是undefined，而是没有任何值，数组的undefined也是有值。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("0 in [undefined,undefined,undefined] // true\n0 in [,,,] // false\n")])])]),t("p",[a._v("ES5对空位的处理：")]),a._v(" "),t("p",[a._v("forEach(), filter(), reduce(), every() 和some()都会跳过空位。")]),a._v(" "),t("p",[a._v("map()会跳过空位，但会保留这个值。")]),a._v(" "),t("p",[a._v("join()和toString()会将空位视为undefined，而undefined和null会被处理成空字符串。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[,'a'].forEach((x,i) => console.log(i)); // 1\n['a',,'b'].filter(x => true);      // ['a','b']\n[,'a'].every(x => x==='a');        // true\n[1,,2].reduce((x,y) => x+y);       // 3\n[,'a'].some(x => x !== 'a');       // false\n[,'a'].map(x => 1);                // [,1]\n[,'a',undefined,null].join('#');   // \"#a##\"\n[,'a',undefined,null].toString();  // \",a,,\"\n")])])]),t("p",[a._v("ES6对空位的处理：")]),a._v(" "),t("p",[a._v("将空位视为正常值，转成undefined。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('Array.from([\'a\',,\'b\']);// [ "a", undefined, "b" ]\n[...[\'a\',,\'b\']];       // [ "a", undefined, "b" ]\n\n//copyWithin() 会连空位一起拷贝。  \n[,\'a\',\'b\',,].copyWithin(2,0) // [,"a",,"a"]\n\n//fill()会将空位视为正常的数组位置。\nnew Array(3).fill(\'a\') // ["a","a","a"]\n\n//for...of循环也会遍历空位。\nlet arr = [, ,];\nfor (let i of arr) {\n  console.log(1);\n}  // 1 1\n')])])]),t("p",[a._v("entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("[...[,'a'].entries()] // [[0,undefined], [1,\"a\"]]\n\n[...[,'a'].keys()] // [0,1]\n\n[...[,'a'].values()] // [undefined,\"a\"]\n\n[,'a'].find(x => true) // undefined\n\n[,'a'].findIndex(x => true) // 0\n")])])]),t("p",[a._v("由于空位的处理规则非常不统一，所以建议避免出现空位。")]),a._v(" "),t("h2",{attrs:{id:"参考文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[a._v("#")]),a._v(" 参考文章")]),a._v(" "),t("p",[t("a",{attrs:{href:"http://es6.ruanyifeng.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("ECMAScript 6 入门"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/xitu/gold-miner/blob/master/TODO/es8-was-released-and-here-are-its-main-new-features.md",target:"_blank",rel:"noopener noreferrer"}},[a._v("ES8 新特性一览"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27844393",target:"_blank",rel:"noopener noreferrer"}},[a._v("ECMAScript 2017（ES8）特性概述"),t("OutboundLink")],1)]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.imooc.com/article/44423",target:"_blank",rel:"noopener noreferrer"}},[a._v("ECMAScript 2018（ES2018）有哪些新功能？"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"推荐文章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推荐文章"}},[a._v("#")]),a._v(" 推荐文章")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/27537439",target:"_blank",rel:"noopener noreferrer"}},[a._v("ECMAScript 2018 标准导读"),t("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);